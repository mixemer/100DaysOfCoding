(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='WolframDesktop 11.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       161,          7]
NotebookDataLength[    483832,       9685]
NotebookOptionsPosition[    476920,       9562]
NotebookOutlinePosition[    477304,       9579]
CellTagsIndexPosition[    477261,       9576]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"data", "=", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"x", "\[Rule]", 
        RowBox[{
         RowBox[{"Exp", "[", 
          RowBox[{"-", 
           RowBox[{"x", "^", "2"}]}], "]"}], "+", 
         RowBox[{"RandomVariate", "[", 
          RowBox[{"NormalDistribution", "[", 
           RowBox[{"0", ",", ".15"}], "]"}], "]"}]}]}], ",", 
       RowBox[{"{", 
        RowBox[{"x", ",", 
         RowBox[{"-", "3"}], ",", "3", ",", ".2"}], "}"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"Length", "[", "data", "]"}], "\[IndentingNewLine]", 
   RowBox[{"plot", "=", 
    RowBox[{"ListPlot", "[", 
     RowBox[{
      RowBox[{"List", "@@@", "data"}], ",", 
      RowBox[{"PlotStyle", "\[Rule]", "Red"}]}], "]"}]}]}]}]], "Input",
 CellChangeTimes->{{3.739562316239769*^9, 3.739562329293951*^9}, 
   3.739562371125181*^9, {3.73956244203343*^9, 3.739562447498114*^9}},
 CellLabel->
  "In[213]:=",ExpressionUUID->"cd2201d5-3990-46f6-93f6-f3f855f70801"],

Cell[BoxData["31"], "Output",
 CellChangeTimes->{3.739562451892255*^9},
 CellLabel->
  "Out[214]=",ExpressionUUID->"d797d7aa-118b-4de0-8bee-77c8a959b3a7"],

Cell[BoxData[
 GraphicsBox[{{}, {{}, 
    {RGBColor[1, 0, 0], PointSize[0.012833333333333334`], AbsoluteThickness[
     1.6], PointBox[CompressedData["
1:eJxTTMoPSmViYGCQB2IQDQEcB7rYty25bH7RPg0M2A7caI01XJZxYP/ZMyDA
cuDok+cXJlqe228MBswHVvntetZz8qz9rJkgwHiAxzVs/lT2q/ZQAw+cVfva
GXNmx36w9jN/9pe6v9rVue7UfrDymT/3L9r68KX+hytQ+77td7jt/HdJRro9
xPzP+3PqZ75KXn8aat6H/YFO59zd/B7azwDrf7n/4kO70xav7tobgNU/3n/n
3Q/PLrXXUPmb+xdUbJqWW/zJfgKYf3L/g6cnDXclvIe5j8Hts7zp9yPv7BdA
5O3fOD9r1Dz9Bsq/aS/yO85v+o+n9iYQ8+3PxPG+3rHouf0ciP328xX+nLR+
dAfmPnu11lePnVZfhKr/bJ+t8KmpS+a6fQbEf/Z5DMcuRBttger/aV+w7Vn3
n6mF+y9Awsf+nNb3oByx4/uhznNI1uhdxyu8CRa+Dvn5QRcFv+2Fms/s8PbG
8bdhijvtz0Hix2En4yYle4ZzUPvYHPbPTHPh6p4PNY/DIcY+WVqFc489ADYo
7zo=
      "]]}, {}}, {}, {}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-3., 3.}, {-0.23613188457946968`, 1.1531806837661307`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.739562451998564*^9},
 CellLabel->
  "Out[215]=",ExpressionUUID->"6f36e005-de60-49a4-bbc1-6b4ce2c8651a"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"testD", ",", "trainD"}], "}"}], " ", "=", " ", 
   RowBox[{"TakeDrop", "[", 
    RowBox[{
     RowBox[{"RandomSample", "@", "data"}], ",", "5"}], "]"}]}], 
  ";"}]], "Input",
 CellLabel->
  "In[208]:=",ExpressionUUID->"38583dcb-b860-4af5-8c5c-40fe8be437f6"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"net2", " ", "=", " ", 
    RowBox[{"NetChain", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"LinearLayer", "[", "100", "]"}], ",", 
        RowBox[{"ElementwiseLayer", "[", "Tanh", "]"}], ",", 
        RowBox[{"LinearLayer", "[", "1", "]"}]}], "}"}], ",", 
      RowBox[{"\"\<Input\>\"", "\[Rule]", "\"\<Scalar\>\""}], ",", 
      RowBox[{"\"\<Output\>\"", "\[Rule]", "\"\<Scalar\>\""}]}], "]"}]}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"net2", " ", "=", " ", 
   RowBox[{"NetChain", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"LinearLayer", "[", "100", "]"}], ",", 
       RowBox[{"DropoutLayer", "[", "0.3", "]"}], ",", 
       RowBox[{"ElementwiseLayer", "[", "Tanh", "]"}], ",", 
       RowBox[{"LinearLayer", "[", "100", "]"}], ",", 
       RowBox[{"ElementwiseLayer", "[", "Tanh", "]"}], ",", 
       RowBox[{"LinearLayer", "[", "]"}]}], "}"}], ",", 
     RowBox[{"\"\<Input\>\"", "\[Rule]", "\"\<Scalar\>\""}], ",", 
     RowBox[{"\"\<Output\>\"", "\[Rule]", "\"\<Scalar\>\""}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"net2T", " ", "=", " ", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"net2", ",", "data", ",", "All", ",", 
    RowBox[{"ValidationSet", "\[Rule]", 
     RowBox[{"Scaled", "[", "0.1", "]"}]}]}], 
   "]"}]}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.739562166274075*^9, 3.7395623112451973`*^9}, {
  3.739562410210733*^9, 3.739562433480176*^9}, {3.739562541561069*^9, 
  3.7395625931670637`*^9}, {3.739562675573769*^9, 3.7395626769710484`*^9}, {
  3.7395627546694613`*^9, 3.739562764166251*^9}},
 CellLabel->
  "In[224]:=",ExpressionUUID->"3b285857-37b7-40a7-8c5b-d304e6c6f28e"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetTrainResultsObject", "SummaryHead"], 
       "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      PanelBox[
       GridBox[{{
          GridBox[{{
             GridBox[{{
                StyleBox[
                 
                 TemplateBox[{"\"Total training time\"", "\":\""}, 
                  "RowDefault"], "SummaryItemAnnotation"], 
                StyleBox["\"33 s\"", "SummaryItem"]}, {
                StyleBox[
                 TemplateBox[{"\"Total rounds\"", "\":\""}, "RowDefault"], 
                 "SummaryItemAnnotation"], 
                StyleBox["8094", "SummaryItem"]}, {
                StyleBox[
                 TemplateBox[{"\"Total batches\"", "\":\""}, "RowDefault"], 
                 "SummaryItemAnnotation"], 
                StyleBox["56658", "SummaryItem"]}, {
                StyleBox[
                 TemplateBox[{"\"Batch size\"", "\":\""}, "RowDefault"], 
                 "SummaryItemAnnotation"], 
                StyleBox["4", "SummaryItem"]}, {
                StyleBox[
                 TemplateBox[{"\"Method\"", "\":\""}, "RowDefault"], 
                 "SummaryItemAnnotation"], 
                StyleBox["\"ADAM\"", "SummaryItem"]}, {
                StyleBox[
                 TemplateBox[{"\"Final round loss\"", "\":\""}, "RowDefault"],
                  "SummaryItemAnnotation"], 
                StyleBox["0.013533920432342963`", "SummaryItem"]}, {
                StyleBox[
                 
                 TemplateBox[{"\"Final validation loss\"", "\":\""}, 
                  "RowDefault"], "SummaryItemAnnotation"], 
                StyleBox["0.047453947365283966`", "SummaryItem"]}}, 
              BaselinePosition -> Automatic, 
              GridBoxAlignment -> {
               "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {"Columns" -> {{0.8}}, "Rows" -> {{0.7}}}], 
             GridBox[{{
                StyleBox[
                 
                 TemplateBox[{"\"Loss evolution plot\"", "\":\""}, 
                  "RowDefault"], "SummaryItemAnnotation"]}, {
                StyleBox[
                 GraphicsBox[{
                   AbsoluteThickness[1.25], {{
                    Hue[0.083, 1., 1.], 
                    LineBox[CompressedData["
1:eJw10nlME2YYx/EChlMRcAi0MiAebAhTPIaO6X5quUTlUMRBOOZkqBQJyimY
IIJAF1AUBygM5C5HoS2lLUfLGgUnRhZcVVjGFJTpgs4VnMo5Zx/e5M2bT75v
nr8eu8Mx/hHaDAbjyPv7//vhgI2XDl55oefUig8OD8XI1arukNi3GvseQ1kP
O7L0PlkaCz/OAM8r8p3GtxJg9HXO4hwJ+WEKnEqGlKa/kuPSkGxwNUziN6Xx
TDru/rF0w4YQckYmWG3uz5OKyIuzMaVaKzmkIBdw4WAiGSyYIK/IhepJtVC0
d1rjqgtg5vZsj/EnL8/HRpOYGY8T5KBLYIiHXqjyyD9ehmw8R3ngCnmkAM4l
5gM7peQ1P2C4ceORqd/IxwsxpuR8nzxA5hch8M8z+ZnzZHUx1gWzR+1sZjT+
/Bp6hZ+oXVeTT5egYuWbRNcYsrwUaZMB3H/DydplaL076JkfSV5ZDu9+UWZv
AvlmOfY4rlFaZJEjr+P8t9UnmJfJBhUYjXjQx2kgN1QglaWnnCwj762EChfz
jATkvyuRt4zj+buUnF+Fz77k6WkteGM1znrrjHgMklXVCIp/5OI7QE6sgbnX
6GnOY7JVLbbxUk2f3SJ31CJC39J3bJwcUofAouyguIfk+TqEsVbVSp6Rr/Mg
nqj00XtH3lWPk7tbDYaMZjV+Wo+ArSnLWGrqWQ0o8rrKcrei/mkjUOXz07Xl
5L5GqJ8Z1rTpkKObkH5qJuMXc/JSPr6z0y+2XZgv4OPtmNOBg2vJ+5vhaLPP
y9iW/LoZxqvPDCtMNU7zbkGs3o7jGWbkkhZod6cs6rAnv2iB9aI7N9Z8Rd4u
wEk2e4bvTL4gQKJ+E1Oxm/xIAJWJq06/J9lZCIvmf3ItAsjpQojuPNndH0i+
J8RsRkSz4XHyKhHOPbcKeuNLjhchXHfPNz3h5B4Ryh0ZTr1sskUrdMpYRWEL
/WgrWDU1xdw4sqwVusOq0IxYsqEYRzc9lVsfIgeLoYxqMOQeJTeKsWSr1ebK
VPKsGPlGo27X4sn72rD4VfyK8SRyWRtknPptfenkV204GM5l7k8j75DA0tt9
fTeXfEkCdnqdGecUeVQCp/e7WlhI3iSFf+nS6NcLzpTio4v89Xwe+b4Uw2E3
zUYKyPYyDDIqedM15CQZBLdvRB1uI/8sgzJBORQtIDPbUb3lr3VSPjmqHYY+
TNs+BbmzHYFJsqyPb5CXdECUAWW9iBzaAd87x+RxA+TmDnTZuJS4PiQzOmHu
YeQmXpjn14mAuQe6YSPkik5MBydbujwhT3Siw83ao1RrTmN2F243PY7UGqN+
pQuH7bf0K1+Sx7rAz/QLHtel/y5ylM498Nmspp4txxc7GS7eZtQH5Zif3DV3
doa6gwLCu/f83YyppyjA0TWRuxvMKf4Dm+h01w==
                    "]]}, {}}, {{
                    Hue[0.59, 0.5, 0.9], 
                    LineBox[{{1, -0.3887460793048514}, {
                    33, -0.7419584004812433}, {65, -1.136660435949965}, {
                    97, -1.5761896163430968`}, {129, -1.309679637034448}, {
                    161, -1.3452183098970296`}, {193, -1.2169349773193114`}, {
                    225, -1.4804235871471407`}, {257, -1.2214822231136782`}, {
                    289, -1.290228704035416}, {321, -1.2527560026047408`}, {
                    353, -1.2368488750326079`}, {385, -1.355886927098617}, {
                    417, -1.2792833178123053`}, {449, -1.3096924444705864`}, {
                    481, -1.251411085505182}, {513, -1.2698678117043338`}, {
                    545, -1.2861788755911974`}, {577, -1.2381504131330596`}, {
                    609, -1.2697878282193922`}, {641, -1.2636075454527165`}, {
                    673, -1.3723054783964572`}, {705, -1.218569420136123}, {
                    737, -1.2071007587382077`}, {769, -1.202946192041257}, {
                    801, -1.281389075097446}, {833, -1.2184268571493277`}, {
                    865, -1.2048265451187639`}, {897, -1.1588353391821333`}, {
                    929, -1.374234828301179}, {961, -1.3302930925842225`}, {
                    993, -1.2632563830999615`}, {1025, -1.242640066073679}, {
                    1057, -1.2871354042491991`}, {1089, -1.334388665760829}, {
                    1121, -1.2025944094861292`}, {
                    1153, -1.1373842223257533`}, {
                    1185, -1.1971287917550364`}, {1217, -1.26519138872094}, {
                    1249, -1.1888433845358446`}, {
                    1281, -1.2678814443845328`}, {1313, -1.218768412266657}, {
                    1345, -1.2877199179150258`}, {1377, -1.178712904304757}, {
                    1409, -1.2860649125951389`}, {1441, -1.257859912058067}, {
                    1473, -1.263194453204798}, {1505, -1.1676500250033055`}, {
                    1537, -1.2239084423730382`}, {
                    1569, -1.2452013686218264`}, {
                    1601, -1.2912625364621466`}, {
                    1633, -1.2287178993776071`}, {1665, -1.19732268149246}, {
                    1697, -1.2421222165239514`}, {
                    1729, -1.2478006512923276`}, {1761, -1.255309546267812}, {
                    1793, -1.257323370052408}, {1825, -1.231925302241886}, {
                    1857, -1.2040402094285643`}, {
                    1889, -1.1793368145603698`}, {
                    1921, -1.1884968942832077`}, {1953, -1.239225807195931}, {
                    1985, -1.2279146434290005`}, {
                    2017, -1.1891055217819717`}, {
                    2049, -1.1584439266316182`}, {2081, -1.2294556550829214`},
                     {2113, -1.1920233880230109`}, {
                    2145, -1.196165519245987}, {2177, -1.270646432327733}, {
                    2209, -1.1682018913122205`}, {
                    2241, -1.2042345690669112`}, {
                    2273, -1.2297428653165894`}, {
                    2305, -1.2393933895780784`}, {
                    2337, -1.1843751731924923`}, {
                    2369, -1.1984704659277299`}, {
                    2401, -1.2068886215181982`}, {
                    2433, -1.2326053123741203`}, {
                    2465, -1.1519622699717145`}, {
                    2497, -1.2634072703741905`}, {2529, -1.197576219067217}, {
                    2561, -1.2309406091214916`}, {
                    2593, -1.1669473705928108`}, {
                    2625, -1.2435583786305302`}, {2657, -1.248502472645628}, {
                    2689, -1.2613073407361561`}, {
                    2721, -1.1745719477150023`}, {
                    2753, -1.2221235880728554`}, {
                    2785, -1.1729956393902397`}, {
                    2817, -1.2292488539963655`}, {
                    2849, -1.1718391398605803`}, {
                    2881, -1.2401792783078511`}, {2913, -1.182084834504335}, {
                    2945, -1.1999934934571286`}, {
                    2977, -1.1833530718096164`}, {3009, -1.14834987838645}, {
                    3041, -1.1878543087286912`}, {
                    3073, -1.2367210561917548`}, {3105, -1.198262731538579}, {
                    3137, -1.1895697873016189`}, {
                    3169, -1.1712538350995845`}, {
                    3201, -1.2152274902398545`}, {
                    3233, -1.1971164122493414`}, {
                    3265, -1.2406065972545475`}, {
                    3297, -1.1851289220534698`}, {
                    3329, -1.1968658922527258`}, {3361, -1.262165953311478}, {
                    3393, -1.2373333651734395`}, {
                    3425, -1.1947382588624404`}, {
                    3457, -1.2271462514974145`}, {3489, -1.194613436908043}, {
                    3521, -1.1979681092127863`}, {
                    3553, -1.2454620585178082`}, {
                    3585, -1.2060846867459007`}, {3617, -1.173858013726564}, {
                    3649, -1.207658578951148}, {3681, -1.2176234078441266`}, {
                    3713, -1.2239990499354447`}, {
                    3745, -1.2911792419899908`}, {3777, -1.20761880780628}, {
                    3809, -1.2623689719949327`}, {
                    3841, -1.1735504363336455`}, {
                    3873, -1.2196241209636123`}, {
                    3905, -1.2505338158205148`}, {
                    3937, -1.2396126917291548`}, {
                    3969, -1.1739708756855611`}, {
                    4001, -1.2632018084006984`}, {
                    4033, -1.2263423253793195`}, {4065, -1.179234429467932}, {
                    4097, -1.2537089501674397`}, {
                    4129, -1.2197851919914542`}, {
                    4161, -1.2290294858401627`}, {
                    4193, -1.2513926995686102`}, {
                    4225, -1.2456983487238869`}, {
                    4257, -1.2414251216140828`}, {
                    4289, -1.1779760979831067`}, {4321, -1.199700616166009}, {
                    4353, -1.1536779378346977`}, {
                    4385, -1.2695909437029742`}, {
                    4417, -1.2943057249614507`}, {
                    4449, -1.2320617381109416`}, {
                    4481, -1.2683892958806453`}, {
                    4513, -1.2710340622830851`}, {
                    4545, -1.2754990042783354`}, {
                    4577, -1.2154945986394536`}, {
                    4609, -1.1753730096814698`}, {
                    4641, -1.2327039181049682`}, {
                    4673, -1.2550729766008828`}, {
                    4705, -1.1777153782265282`}, {
                    4737, -1.2055698658581897`}, {4769, -1.223666165435228}, {
                    4801, -1.207683033228281}, {4833, -1.2350346396856178`}, {
                    4865, -1.2640064415249723`}, {
                    4897, -1.2360891292291962`}, {
                    4929, -1.2458041898663474`}, {
                    4961, -1.1979114543504465`}, {
                    4993, -1.1948806016923985`}, {5025, -1.224759798574129}, {
                    5057, -1.1922956644161473`}, {
                    5089, -1.2563450090887722`}, {
                    5121, -1.2333348111596438`}, {
                    5153, -1.2265355081196112`}, {
                    5185, -1.2231182434326504`}, {
                    5217, -1.2293473863552358`}, {
                    5249, -1.2330912320039593`}, {
                    5281, -1.2964126528891255`}, {
                    5313, -1.2125452382947743`}, {
                    5345, -1.2095284308000889`}, {
                    5377, -1.2883209311905355`}, {
                    5409, -1.1710278206744165`}, {
                    5441, -1.2622392776830824`}, {
                    5473, -1.1973450569960165`}, {
                    5505, -1.1762719742367456`}, {
                    5537, -1.2733632496579135`}, {5569, -1.163548838092941}, {
                    5601, -1.2370877570836176`}, {5633, -1.22398653065989}, {
                    5665, -1.2314895080691524`}, {
                    5697, -1.3173703176766332`}, {
                    5729, -1.1535338231658547`}, {
                    5761, -1.2662512191611148`}, {5793, -1.246644711607542}, {
                    5825, -1.2063553878440283`}, {
                    5857, -1.2244250286758682`}, {5889, -1.220568403216321}, {
                    5921, -1.2438313866408173`}, {
                    5953, -1.2818411493170239`}, {5985, -1.232310761940624}, {
                    6017, -1.2888689077162836`}, {
                    6049, -1.1769728197049272`}, {
                    6081, -1.2610534342696273`}, {6113, -1.244438386427549}, {
                    6145, -1.2076712365427504`}, {
                    6177, -1.2230547770081603`}, {
                    6209, -1.2064953956010893`}, {6241, -1.193848521335021}, {
                    6273, -1.2428912693127763`}, {
                    6305, -1.2030461634836438`}, {
                    6337, -1.2192870659888277`}, {
                    6369, -1.3035605823822707`}, {
                    6401, -1.2256012402497312`}, {
                    6433, -1.2075809190009008`}, {6465, -1.175577299704799}, {
                    6497, -1.2249002198634242`}, {
                    6529, -1.2847298513111085`}, {
                    6561, -1.2870737655624584`}, {
                    6593, -1.2498183536890395`}, {
                    6625, -1.2198625423401388`}, {
                    6657, -1.2259275549611666`}, {
                    6689, -1.2481011743367536`}, {
                    6721, -1.1887770628473424`}, {
                    6753, -1.2184388426256032`}, {
                    6785, -1.2566534626740709`}, {6817, -1.275974642297582}, {
                    6849, -1.246363310792323}, {6881, -1.2438954952436982`}, {
                    6913, -1.227522300268117}, {6945, -1.274200211775413}, {
                    6977, -1.2833012079947754`}, {7009, -1.271501749196329}, {
                    7041, -1.2342411280551693`}, {
                    7073, -1.3027526826141682`}, {
                    7105, -1.2586459536392995`}, {
                    7137, -1.2213839505358712`}, {
                    7169, -1.2350214646794695`}, {7201, -1.289147893821136}, {
                    7233, -1.2674451306302574`}, {7265, -1.236300412784435}, {
                    7297, -1.3032916683845401`}, {
                    7329, -1.2000463687790492`}, {
                    7361, -1.2262145651392737`}, {
                    7393, -1.3048050888764668`}, {7425, -1.212819627982803}, {
                    7457, -1.223031631783442}, {7489, -1.2621991223271107`}, {
                    7521, -1.2276013690036338`}, {
                    7553, -1.2240618956478637`}, {
                    7585, -1.2342958447466663`}, {
                    7617, -1.2408855310402076`}, {
                    7649, -1.3075232483158585`}, {
                    7681, -1.2021243659212208`}, {
                    7713, -1.2367518074194461`}, {
                    7745, -1.2411276873824957`}, {
                    7777, -1.2551826997862763`}, {
                    7809, -1.3221715878968006`}, {
                    7841, -1.2182382632221325`}, {7873, -1.213596504559047}, {
                    7905, -1.2061257999709796`}, {
                    7937, -1.1642602747802049`}, {7969, -1.262598562536028}, {
                    8001, -1.2548042733498552`}, {
                    8033, -1.2674380326569739`}, {
                    8065, -1.2145580109033582`}}]}, {}}}, 
                  ImageSize -> {132, 82}, Frame -> True, Axes -> None, 
                  AspectRatio -> Full, 
                  BaseStyle -> {
                   FontFamily -> "Verdana", FontSize -> 8, FontColor -> 
                    GrayLevel[0.5], ScriptSizeMultipliers -> 0.2, 
                    ScriptMinSize -> 6}, PlotRange -> {{0, 8093}, {-2., -1.}},
                   GridLines -> {{2000., 4000., 6000., 8000., 
                    10000.}, {{-2., 
                    GrayLevel[0.9]}, {-1.6989700043360185`, 
                    GrayLevel[0.95]}, {-1.5228787452803374`, 
                    GrayLevel[0.95]}, {-1.3979400086720375`, 
                    GrayLevel[0.95]}, {-1.301029995663981, 
                    GrayLevel[0.95]}, {-1.2218487496163564`, 
                    GrayLevel[0.95]}, {-1.154901959985743, 
                    GrayLevel[0.95]}, {-1.0969100130080565`, 
                    GrayLevel[0.95]}, {-1.045757490560675, 
                    GrayLevel[0.95]}}}, PlotRangePadding -> {0, 
                    Scaled[0.05]}, PlotRangeClipping -> True, Background -> 
                  GrayLevel[1], FrameStyle -> GrayLevel[0.5], GridLinesStyle -> 
                  GrayLevel[0.93], FrameLabel -> None, ImagePadding -> 1, 
                  FrameTicks -> None], "SummaryItem"]}}, BaselinePosition -> 
              Automatic, 
              GridBoxAlignment -> {
               "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{1}}, "Rows" -> {{1, 0.1}}}]}}, BaselinePosition -> 
           Automatic, 
           GridBoxAlignment -> {
            "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
           GridBoxSpacings -> {
            "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
        GridBoxAlignment -> {"Rows" -> {{Top}}}, 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
        GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 1}], 
       BaselinePosition -> Baseline, 
       BaseStyle -> {
        ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
         3, ShowSyntaxStyles -> False}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetTrainResultsObject[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.7395628165709743`*^9},
 CellLabel->
  "Out[226]=",ExpressionUUID->"44b43b77-7753-4378-b2c8-94626c24d5c3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net2T", " ", "=", " ", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"net2", ",", "trainD", ",", "All", ",", 
    RowBox[{"ValidationSet", "\[Rule]", "trainD"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7395627726073093`*^9, 3.7395627748008623`*^9}},
 CellLabel->
  "In[227]:=",ExpressionUUID->"546e3b35-5717-4f12-84d3-f01e03e6e08f"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetTrainResultsObject", "SummaryHead"], 
       "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      PanelBox[
       GridBox[{{
          GridBox[{{
             GridBox[{{
                StyleBox[
                 
                 TemplateBox[{"\"Total training time\"", "\":\""}, 
                  "RowDefault"], "SummaryItemAnnotation"], 
                StyleBox["\"9.4 s\"", "SummaryItem"]}, {
                StyleBox[
                 TemplateBox[{"\"Total rounds\"", "\":\""}, "RowDefault"], 
                 "SummaryItemAnnotation"], 
                StyleBox["10000", "SummaryItem"]}, {
                StyleBox[
                 TemplateBox[{"\"Total batches\"", "\":\""}, "RowDefault"], 
                 "SummaryItemAnnotation"], 
                StyleBox["10000", "SummaryItem"]}, {
                StyleBox[
                 TemplateBox[{"\"Batch size\"", "\":\""}, "RowDefault"], 
                 "SummaryItemAnnotation"], 
                StyleBox["26", "SummaryItem"]}, {
                StyleBox[
                 TemplateBox[{"\"Method\"", "\":\""}, "RowDefault"], 
                 "SummaryItemAnnotation"], 
                StyleBox["\"ADAM\"", "SummaryItem"]}, {
                StyleBox[
                 TemplateBox[{"\"Final round loss\"", "\":\""}, "RowDefault"],
                  "SummaryItemAnnotation"], 
                StyleBox["0.009683249822667396`", "SummaryItem"]}, {
                StyleBox[
                 
                 TemplateBox[{"\"Final validation loss\"", "\":\""}, 
                  "RowDefault"], "SummaryItemAnnotation"], 
                StyleBox["0.006283762363287119`", "SummaryItem"]}}, 
              BaselinePosition -> Automatic, 
              GridBoxAlignment -> {
               "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {"Columns" -> {{0.8}}, "Rows" -> {{0.7}}}], 
             GridBox[{{
                StyleBox[
                 
                 TemplateBox[{"\"Loss evolution plot\"", "\":\""}, 
                  "RowDefault"], "SummaryItemAnnotation"]}, {
                StyleBox[
                 GraphicsBox[{
                   AbsoluteThickness[1.25], {{
                    Hue[0.083, 1., 1.], 
                    LineBox[CompressedData["
1:eJw1ygswFAgcx/FdV87Z5BRxa085j7ras8gsuug30d2J4nI9PBKityQTLurO
o6nJI4/Ia7RINi23WNta1j4YZS4149ypO41qIne9iSRxd+1//zP/+c9nvn/r
yNgt0XoMBiPqv/3/ascHTjcWxL2teK78QFUk5C7ZdSMBk1ojFhy16Y7p7Lda
3z+GYdeXXssLp7VelgK+nWug6hbZMRXB90ydg96TAzLQW3NAWWL4TusjpyFy
W+mSb07OPYumsjucoG1kcTY+WzggWJJB3peLOyrR/GfnyFN5+LHeQcNNJZ8p
wO6LAZz1NWSLQjCDS4tDisnCIojceUn/3Ca7FWM45C6z4Cb5RglWvVcaLxkm
7yjDni9tHLcuntF6tBxl3yWOsO3ISRV45b1m8wqd5wmg/0iRYL+TfFMAXrjf
dbY3+Xwl1soPr+bkkEOrcDv6hdneC2TbanA1LGlFF/lpNSwrmMLifrLkEuI3
TSQ7VZBTavDuk95dR8fI3pcxaP/Qxpf9XusFtXC9djXd+CNyfy0kJUw3tie5
XIih5r9Z8mhy1BVMjPcERejMrUN289q2Q/nk13UoyvTMqjpFbr+KdRZzg2sG
yBkiHNoTFrO1lexXDy++4ufvebNamzYgkM/ON+CQBxtQOangekSRL/2Cg9bq
Iok/mS+GR+pzs7Bt5FIxjmxWhG6KIc+KYcsKPFF9mRzZiJKB2j67YnJ3I8Zf
Za4e6yKvbIIBM9Jdv4Wc0wTBdaO8AA15rAnPMuMHs0bJ25qhqnknddZZ3oz9
Zi7llq/JVhKkxF1Mm2cwp3WaBGLeaKBwivqIBL+HGtrm6frGFhiqi6aGh6k3
tMDp18hBLxb1RVK4b/cpHVpETpAi7mQEb/188p9SvFRHf32AS/a8hnXJTvzH
oeSqawiNueBv/AVZX4Zuy3LG4vXkAzJ4CipmWbvJt2TwPv+xg4Pu37kV2x2t
6ks2kItasfFE6N07x8nTragJT9aIfMhhcggPco0ys8gaORInNb6nTpPt2yDO
WTUtSiKfbcOn7J6QvgLy8zb8tk/6ICefvKUdSXFvzk0cJkvbwQtebpGnJrMV
cC84nsGXk08q0Hil3jeljvxQgfDpFkOnCfI3HRh1Dd9fO0Ou60DYzNOlDTov
VIKlnyOv1GOoPvioErm1kiB/FvkPJXir56rGzcmfq9ARVfDTFjeyvwomUsGi
PEdyqgqWe3c1df1AblaBk8AYN/MnD6tgVdmSPx5DNldjqbVZd0Qi2UeNjJ3L
BH+lk5PVYCcbidIKyfVqGIwzH31VSh5Sw3dOHreihGyiwQtHCz2ukOylQU+U
rD9eTD6mwVx63/Y8BblWg1HuE9n5NvJdDfy8RE9MesmsTrwIkDjbPCB7dOJ0
/JtvDe6RYzuxIei+n+wxQ/UvjC5Dow==
                    "]]}, {}}, {{
                    Hue[0.59, 0.5, 0.9], 
                    
                    LineBox[{{1, -0.8999038222974307}, {
                    40, -0.9456796497453623}, {79, -1.0734759128994347`}, {
                    118, -1.3511434260092214`}, {157, -1.5165843915438348`}, {
                    196, -1.5679098105509235`}, {235, -1.5830580817314988`}, {
                    274, -1.6622820772826572`}, {313, -1.6844414496523734`}, {
                    352, -1.707821871582785}, {391, -1.7285262566383524`}, {
                    430, -1.7031527609701256`}, {469, -1.688885167999566}, {
                    508, -1.7459968528021554`}, {547, -1.7400596814861442`}, {
                    586, -1.7360907662071106`}, {625, -1.7480426279606822`}, {
                    664, -1.7377036047260386`}, {703, -1.7117879399428946`}, {
                    742, -1.7623861253780977`}, {781, -1.7625145221272254`}, {
                    820, -1.765684363010205}, {859, -1.7722074005693955`}, {
                    898, -1.7569978961793407`}, {937, -1.7354137533412457`}, {
                    976, -1.7583483089206553`}, {1015, -1.774536215110528}, {
                    1054, -1.7682467625008484`}, {
                    1093, -1.7256616368475044`}, {
                    1132, -1.7023184519236942`}, {
                    1171, -1.7783042594245957`}, {
                    1210, -1.7669326731456998`}, {
                    1249, -1.7730798927414113`}, {
                    1288, -1.7817040721913173`}, {
                    1327, -1.7775201671661547`}, {
                    1366, -1.7813765879787387`}, {
                    1405, -1.7397453160763108`}, {
                    1444, -1.7833330562718008`}, {
                    1483, -1.7734269700926089`}, {
                    1522, -1.7725459968524615`}, {
                    1561, -1.7875739803545276`}, {
                    1600, -1.7707401488859644`}, {
                    1639, -1.7391050910280492`}, {
                    1678, -1.7930710572095236`}, {
                    1717, -1.7671651527726056`}, {1756, -1.796227243141716}, {
                    1795, -1.7950727559906918`}, {
                    1834, -1.7739884567706163`}, {
                    1873, -1.8070558182096874`}, {
                    1912, -1.8030575735444665`}, {
                    1951, -1.8016146389324683`}, {
                    1990, -1.8137275146723606`}, {
                    2029, -1.8132285614787136`}, {
                    2068, -1.8125956514311923`}, {2107, -1.809684909505406}, {
                    2146, -1.782169308031644}, {2185, -1.8244257550618312`}, {
                    2224, -1.82353625827158}, {2263, -1.8295963128362653`}, {
                    2302, -1.8091236281444876`}, {
                    2341, -1.8229037860122352`}, {
                    2380, -1.8386787551471535`}, {
                    2419, -1.8034689134382824`}, {2458, -1.842319774462499}, {
                    2497, -1.8386120469393528`}, {
                    2536, -1.8429125657806165`}, {
                    2575, -1.8311656148932123`}, {
                    2614, -1.8547729779065716`}, {
                    2653, -1.8415755056465153`}, {
                    2692, -1.7913551371052017`}, {
                    2731, -1.8436135664900595`}, {
                    2770, -1.8507800319363663`}, {2809, -1.853581066788046}, {
                    2848, -1.8500574376494012`}, {2887, -1.867424763527175}, {
                    2926, -1.843040661487573}, {2965, -1.8683916757962167`}, {
                    3004, -1.8719130366683576`}, {
                    3043, -1.8747136255761088`}, {
                    3082, -1.8644901607218003`}, {
                    3121, -1.8745949351945261`}, {
                    3160, -1.8831721894989049`}, {3199, -1.834111753108069}, {
                    3238, -1.8738691382723698`}, {
                    3277, -1.8920083980290863`}, {
                    3316, -1.8861916515924215`}, {
                    3355, -1.8949274893511303`}, {
                    3394, -1.8899680949493032`}, {
                    3433, -1.8885999868778427`}, {3472, -1.907854207069237}, {
                    3511, -1.906085760300209}, {3550, -1.913414738796156}, {
                    3589, -1.8922561870747368`}, {
                    3628, -1.8818514569282256`}, {
                    3667, -1.8864996160979937`}, {3706, -1.928380211041581}, {
                    3745, -1.9218992923568512`}, {
                    3784, -1.8988252901835942`}, {
                    3823, -1.9278455388191147`}, {3862, -1.921004217725462}, {
                    3901, -1.9437219051020191`}, {
                    3940, -1.9408248329314717`}, {
                    3979, -1.9269917414434534`}, {
                    4018, -1.9503701305658854`}, {
                    4057, -1.9256209092643015`}, {
                    4096, -1.9341759939844572`}, {
                    4135, -1.9113806203404948`}, {
                    4174, -1.9629769144171139`}, {
                    4213, -1.9486171915548667`}, {
                    4252, -1.9379645219342432`}, {
                    4291, -1.9729887626903164`}, {
                    4330, -1.9668805898723054`}, {4369, -1.970672007386331}, {
                    4408, -1.962313305870295}, {4447, -1.953361981470165}, {
                    4486, -1.9518270996808602`}, {
                    4525, -1.9550125236367257`}, {
                    4564, -1.9517910123179996`}, {
                    4603, -1.9338710822553549`}, {
                    4642, -1.9764798780382784`}, {4681, -1.981601390911464}, {
                    4720, -1.976905343093481}, {4759, -1.9458195915266154`}, {
                    4798, -1.9679393540140921`}, {
                    4837, -1.9670455200664607`}, {
                    4876, -1.9615653135562368`}, {4915, -1.985275018447111}, {
                    4954, -1.9636462999599829`}, {4993, -1.982993677761713}, {
                    5032, -1.9672142057841466`}, {
                    5071, -1.9816027269566976`}, {
                    5110, -1.9913507026503365`}, {
                    5149, -1.9769181352010206`}, {5188, -1.976266359048218}, {
                    5227, -1.9686986466622556`}, {5266, -1.979973328472027}, {
                    5305, -1.9873615032761345`}, {5344, -1.94222331807256}, {
                    5383, -1.9909650682633806`}, {
                    5422, -1.9702665016630982`}, {
                    5461, -1.9842979115088293`}, {
                    5500, -1.9916814424304428`}, {
                    5539, -1.9914365487436732`}, {5578, -1.982972998827251}, {
                    5617, -1.9841415132687392`}, {
                    5656, -1.9781796054038205`}, {
                    5695, -1.9966733995618564`}, {
                    5734, -1.9888179629751574`}, {
                    5773, -1.9840122800026905`}, {
                    5812, -1.9676932518596428`}, {
                    5851, -1.9918169353857857`}, {
                    5890, -1.9679455499700507`}, {
                    5929, -1.9994887703862139`}, {
                    5968, -1.9831955884466044`}, {
                    6007, -1.9670040855561026`}, {6046, -1.980011597674797}, {
                    6085, -2.0016034219921712`}, {
                    6124, -1.9948593900348195`}, {
                    6163, -1.9800197748858108`}, {6202, -2.002708299719805}, {
                    6241, -1.9826752260601823`}, {
                    6280, -1.9721043267607488`}, {
                    6319, -1.9455747273855837`}, {
                    6358, -1.9963054696835887`}, {
                    6397, -1.9646238662006288`}, {
                    6436, -1.9805634292480818`}, {
                    6475, -2.0083533932945525`}, {
                    6514, -2.0096879181310494`}, {
                    6553, -1.9875426226689537`}, {
                    6592, -2.0088573543033403`}, {
                    6631, -1.9972620637230774`}, {
                    6670, -1.9846263967180244`}, {6709, -2.00483817093005}, {
                    6748, -1.990185334823534}, {6787, -2.0066456518400244`}, {
                    6826, -2.0099677238468905`}, {
                    6865, -1.9999200256955625`}, {
                    6904, -1.9729443250263348`}, {
                    6943, -2.0128473153719724`}, {
                    6982, -2.0037110483046456`}, {7021, -2.003177164460684}, {
                    7060, -2.018213633387274}, {7099, -2.0120442151730735`}, {
                    7138, -2.001959867495836}, {7177, -1.9961310699232502`}, {
                    7216, -1.9762828560007044`}, {7255, -2.00215428380063}, {
                    7294, -2.016344697541424}, {7333, -2.010887540103876}, {
                    7372, -2.018523273992934}, {7411, -2.02646448978148}, {
                    7450, -2.0320336679155395`}, {
                    7489, -2.0121098336462486`}, {7528, -2.001232192049465}, {
                    7567, -2.028700462009233}, {7606, -2.0245128010737923`}, {
                    7645, -2.0457531534657756`}, {
                    7684, -2.0273256354162332`}, {
                    7723, -2.0272465994381714`}, {
                    7762, -2.0310892101294296`}, {
                    7801, -2.0352235897003914`}, {
                    7840, -2.0513875793650715`}, {
                    7879, -2.0509652632827375`}, {
                    7918, -2.0391117977875846`}, {
                    7957, -2.0307140049333556`}, {
                    7996, -2.0672021062860866`}, {
                    8035, -2.0181865876449834`}, {
                    8074, -2.0438378305555327`}, {8113, -2.057773324180703}, {
                    8152, -2.071107661698903}, {8191, -2.051019314519854}, {
                    8230, -2.0368001253674217`}, {8269, -2.048950022324989}, {
                    8308, -2.0534428731472074`}, {8347, -2.032752493815288}, {
                    8386, -2.0937434823120937`}, {8425, -2.065399307466372}, {
                    8464, -2.0928965246217337`}, {8503, -2.107835697759595}, {
                    8542, -2.1019526436391676`}, {8581, -2.103192058756624}, {
                    8620, -2.1048035668519294`}, {8659, -2.117417381052223}, {
                    8698, -2.0809289804765747`}, {8737, -2.121320373940877}, {
                    8776, -2.1218222394221664`}, {8815, -2.121593298385754}, {
                    8854, -2.109094984815552}, {8893, -2.117651571405122}, {
                    8932, -2.13170093481134}, {8971, -2.1198359920015784`}, {
                    9010, -2.0982537017654423`}, {9049, -2.135709587740083}, {
                    9088, -2.14079190015743}, {9127, -2.1346347484963437`}, {
                    9166, -2.134619443447712}, {9205, -2.122330425471162}, {
                    9244, -2.152488456159027}, {9283, -2.1343550668552087`}, {
                    9322, -2.1239092475385086`}, {
                    9361, -2.1437899986194213`}, {
                    9400, -2.1561626085918575`}, {
                    9439, -2.1377606201657455`}, {
                    9478, -2.1522392708444293`}, {
                    9517, -2.1729718705306764`}, {
                    9556, -2.1720627213156005`}, {9595, -2.178597571730099}, {
                    9634, -2.1588928927801474`}, {
                    9673, -2.1377527926623476`}, {9712, -2.17727618988314}, {
                    9751, -2.170609124532168}, {9790, -2.167517448267274}, {
                    9829, -2.1837081067249575`}, {
                    9868, -2.1556587968430803`}, {
                    9907, -2.1808586474060774`}, {
                    9946, -2.1983645073230615`}, {
                    9985, -2.2030701389189793`}}]}, {}}}, 
                  ImageSize -> {132, 82}, Frame -> True, Axes -> None, 
                  AspectRatio -> Full, 
                  BaseStyle -> {
                   FontFamily -> "Verdana", FontSize -> 8, FontColor -> 
                    GrayLevel[0.5], ScriptSizeMultipliers -> 0.2, 
                    ScriptMinSize -> 6}, 
                  PlotRange -> {{0, 9999}, {-2.2, -0.8}}, 
                  GridLines -> {{2000., 4000., 6000., 8000., 10000.}, {{-3., 
                    GrayLevel[0.9]}, {-2., 
                    GrayLevel[0.9]}, {-1., 
                    GrayLevel[0.9]}, {-2.6989700043360183`, 
                    GrayLevel[0.95]}, {-2.397940008672037, 
                    GrayLevel[0.95]}, {-2.221848749616356, 
                    GrayLevel[0.95]}, {-2.0969100130080562`, 
                    GrayLevel[0.95]}, {-1.6989700043360185`, 
                    GrayLevel[0.95]}, {-1.3979400086720375`, 
                    GrayLevel[0.95]}, {-1.2218487496163564`, 
                    GrayLevel[0.95]}, {-1.0969100130080565`, 
                    GrayLevel[0.95]}, {-0.6989700043360187, 
                    GrayLevel[0.95]}, {-0.39794000867203755`, 
                    GrayLevel[0.95]}, {-0.22184874961635626`, 
                    GrayLevel[0.95]}, {-0.09691001300805638, 
                    GrayLevel[0.95]}}}, PlotRangePadding -> {0, 
                    Scaled[0.05]}, PlotRangeClipping -> True, Background -> 
                  GrayLevel[1], FrameStyle -> GrayLevel[0.5], GridLinesStyle -> 
                  GrayLevel[0.93], FrameLabel -> None, ImagePadding -> 1, 
                  FrameTicks -> None], "SummaryItem"]}}, BaselinePosition -> 
              Automatic, 
              GridBoxAlignment -> {
               "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{1}}, "Rows" -> {{1, 0.1}}}]}}, BaselinePosition -> 
           Automatic, 
           GridBoxAlignment -> {
            "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
           GridBoxSpacings -> {
            "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
        GridBoxAlignment -> {"Rows" -> {{Top}}}, 
        GridBoxItemSize -> {
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
        GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 1}], 
       BaselinePosition -> Baseline, 
       BaseStyle -> {
        ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
         3, ShowSyntaxStyles -> False}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetTrainResultsObject[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.739562376434326*^9, 3.73956243421272*^9, 3.739562600583744*^9, 
   3.739562711250038*^9, {3.7395627790052223`*^9, 3.739562780298442*^9}, 
   3.73956282953767*^9},
 CellLabel->
  "Out[227]=",ExpressionUUID->"bee3108c-e410-402a-b54f-b650d990467d"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
  "Most", " ", "common", " ", "regression", " ", "loss", " ", "funciton"}], 
  "*)"}]], "Input",
 CellChangeTimes->{{3.739562486979787*^9, 3.739562527368474*^9}, 
   3.7395627404585447`*^9, {3.7395630350828342`*^9, 
   3.739563046173091*^9}},ExpressionUUID->"d099b63e-573c-4434-abf0-\
e65fe0721273"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"loss", " ", "=", " ", 
  RowBox[{"MeanSquaredLossLayer", "[", "]"}]}]], "Input",
 CellChangeTimes->{{3.739563049991873*^9, 3.739563058075527*^9}},
 CellLabel->
  "In[228]:=",ExpressionUUID->"d9b3b806-7049-464c-aca1-a780225ab0b3"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["MeanSquaredLossLayer", "SummaryHead"], 
       "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = True}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014705882352941176`], {
                 RGBColor[0.33, 0.33, 0.33], 
                 Thickness[0.015029411764705883`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 18.5}, {14., 18.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.557, 0.557, 0.557], 
                 Thickness[0.015029411764705883`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{52.5, 18.5}, {44., 18.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.85, 0.85, 0.85], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{22.23,
                   18.5}, {33.5, 29.77}, {44.77, 18.5}, {33.5, 7.23}}}]}, {
                 FaceForm[{
                   RGBColor[0.56, 0.56, 0.56], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{33.5, 30.29}, {21.71, 
                  18.5}, {33.5, 6.71}, {45.29, 18.5}}, {{33.5, 29.25}, {44.25,
                   18.5}, {33.5, 7.75}, {22.75, 18.5}}}]}, {
                 FaceForm[{
                   RGBColor[
                   0.43900000000000006`, 0.43900000000000006`, 
                    0.43900000000000006`], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}}}, {{{53.56, 15.4}, {51.88, 15.4}, {50.52, 16.76}, {
                  50.52, 18.44}, {50.52, 20.12}, {51.88, 21.48}, {53.56, 
                  21.48}, {55.24, 21.48}, {56.6, 20.12}, {56.6, 18.44}, {56.6,
                   16.76}, {55.24, 15.4}, {53.56, 15.4}}}]}, {
                 FaceForm[{
                   RGBColor[
                   0.43900000000000006`, 0.43900000000000006`, 
                    0.43900000000000006`], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}}, {{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}, {0, 1, 0}}}, {{{53.56, 21.83}, {51.69, 21.83}, {50.17, 
                   20.31}, {50.17, 18.44}, {50.17, 16.57}, {51.69, 15.05}, {
                   53.56, 15.05}, {55.43, 15.05}, {56.95, 16.57}, {56.95, 
                   18.44}, {56.95, 20.31}, {55.43, 21.83}, {53.56, 21.83}}, {{
                   53.56, 21.83}, {53.56, 21.13}, {55.04, 21.13}, {56.25, 
                   19.92}, {56.25, 18.44}, {56.25, 16.96}, {55.04, 15.75}, {
                   53.56, 15.75}, {52.08, 15.75}, {50.87, 16.96}, {50.87, 
                   18.44}, {50.87, 19.92}, {52.08, 21.13}, {53.56, 21.13}, {
                   53.56, 21.83}}}]}, {
                 FaceForm[{
                   RGBColor[
                   0.43900000000000006`, 0.43900000000000006`, 
                    0.43900000000000006`], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}}}, {{{13.56, 15.5}, {11.94, 15.5}, {10.62, 16.82}, {
                  10.62, 18.44}, {10.62, 20.06}, {11.94, 21.38}, {13.56, 
                  21.38}, {15.18, 21.38}, {16.5, 20.06}, {16.5, 18.44}, {16.5,
                   16.82}, {15.18, 15.5}, {13.56, 15.5}}}]}, {
                 FaceForm[{
                   RGBColor[
                   0.43900000000000006`, 0.43900000000000006`, 
                    0.43900000000000006`], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}, {1, 3, 3}}}, {{{13.56, 21.73}, {11.74, 21.73}, {10.27, 
                   20.26}, {10.27, 18.44}, {10.27, 16.62}, {11.74, 15.15}, {
                   13.56, 15.15}, {15.38, 15.15}, {16.85, 16.62}, {16.85, 
                   18.44}, {16.85, 20.26}, {15.38, 21.73}, {13.56, 
                   21.73}}, CompressedData["
1:eJxTTMoPSmViYGAQBmIQLd/6OnCHnLaDx8MqkXXspg4MINCgA+efPQMCug6H
v2rE9B8ygYgf13MAa3M1gYrrQ8WNHdJAQM3AAcR1V0TwC225ri8uMILzwfqY
DB2qgcoe/tJ1MAaBzfoOMPfA+GBtezXhfIg5GlB1Bg7fQNaXqjsAya8acwwg
5lWpOcyaCQSShhD1H1Qh/jqA4MPcA+ODzbtnDHGXkwbc/+jhAwASgHiO
                   
                   "]}]}}, ImageSize -> {40, Automatic}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"tensor\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Target\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"tensor\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}, "RowsIndexed" -> {}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014705882352941176`], {
                 RGBColor[0.33, 0.33, 0.33], 
                 Thickness[0.015029411764705883`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 18.5}, {14., 18.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.557, 0.557, 0.557], 
                 Thickness[0.015029411764705883`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{52.5, 18.5}, {44., 18.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.85, 0.85, 0.85], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{22.23,
                   18.5}, {33.5, 29.77}, {44.77, 18.5}, {33.5, 7.23}}}]}, {
                 FaceForm[{
                   RGBColor[0.56, 0.56, 0.56], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{33.5, 30.29}, {21.71, 
                  18.5}, {33.5, 6.71}, {45.29, 18.5}}, {{33.5, 29.25}, {44.25,
                   18.5}, {33.5, 7.75}, {22.75, 18.5}}}]}, {
                 FaceForm[{
                   RGBColor[
                   0.43900000000000006`, 0.43900000000000006`, 
                    0.43900000000000006`], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}}}, {{{53.56, 15.4}, {51.88, 15.4}, {50.52, 16.76}, {
                  50.52, 18.44}, {50.52, 20.12}, {51.88, 21.48}, {53.56, 
                  21.48}, {55.24, 21.48}, {56.6, 20.12}, {56.6, 18.44}, {56.6,
                   16.76}, {55.24, 15.4}, {53.56, 15.4}}}]}, {
                 FaceForm[{
                   RGBColor[
                   0.43900000000000006`, 0.43900000000000006`, 
                    0.43900000000000006`], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}}, {{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}, {0, 1, 0}}}, {{{53.56, 21.83}, {51.69, 21.83}, {50.17, 
                   20.31}, {50.17, 18.44}, {50.17, 16.57}, {51.69, 15.05}, {
                   53.56, 15.05}, {55.43, 15.05}, {56.95, 16.57}, {56.95, 
                   18.44}, {56.95, 20.31}, {55.43, 21.83}, {53.56, 21.83}}, {{
                   53.56, 21.83}, {53.56, 21.13}, {55.04, 21.13}, {56.25, 
                   19.92}, {56.25, 18.44}, {56.25, 16.96}, {55.04, 15.75}, {
                   53.56, 15.75}, {52.08, 15.75}, {50.87, 16.96}, {50.87, 
                   18.44}, {50.87, 19.92}, {52.08, 21.13}, {53.56, 21.13}, {
                   53.56, 21.83}}}]}, {
                 FaceForm[{
                   RGBColor[
                   0.43900000000000006`, 0.43900000000000006`, 
                    0.43900000000000006`], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}}}, {{{13.56, 15.5}, {11.94, 15.5}, {10.62, 16.82}, {
                  10.62, 18.44}, {10.62, 20.06}, {11.94, 21.38}, {13.56, 
                  21.38}, {15.18, 21.38}, {16.5, 20.06}, {16.5, 18.44}, {16.5,
                   16.82}, {15.18, 15.5}, {13.56, 15.5}}}]}, {
                 FaceForm[{
                   RGBColor[
                   0.43900000000000006`, 0.43900000000000006`, 
                    0.43900000000000006`], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}, {1, 3, 3}}}, {{{13.56, 21.73}, {11.74, 21.73}, {10.27, 
                   20.26}, {10.27, 18.44}, {10.27, 16.62}, {11.74, 15.15}, {
                   13.56, 15.15}, {15.38, 15.15}, {16.85, 16.62}, {16.85, 
                   18.44}, {16.85, 20.26}, {15.38, 21.73}, {13.56, 
                   21.73}}, CompressedData["
1:eJxTTMoPSmViYGAQBmIQLd/6OnCHnLaDx8MqkXXspg4MINCgA+efPQMCug6H
v2rE9B8ygYgf13MAa3M1gYrrQ8WNHdJAQM3AAcR1V0TwC225ri8uMILzwfqY
DB2qgcoe/tJ1MAaBzfoOMPfA+GBtezXhfIg5GlB1Bg7fQNaXqjsAya8acwwg
5lWpOcyaCQSShhD1H1Qh/jqA4MPcA+ODzbtnDHGXkwbc/+jhAwASgHiO
                   
                   "]}]}}, ImageSize -> {40, Automatic}], 
              GridBox[{{
                 ItemBox[
                  StyleBox["Ports", FontWeight -> Bold]], 
                 ItemBox[""]}, {
                 StyleBox[
                  TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"tensor\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Target\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"tensor\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Loss\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}}, 
               BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}, "RowsIndexed" -> {}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("MeanSquaredLossLayer[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.739563058637866*^9},
 CellLabel->
  "Out[228]=",ExpressionUUID->"4f707b21-23fc-4c98-b79c-1e312c068c3a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"loss", "@", 
  RowBox[{"<|", 
   RowBox[{
    RowBox[{"\"\<Input\>\"", "\[Rule]", "3"}], ",", 
    RowBox[{"\"\<Target\>\"", "\[Rule]", "4"}]}], "|>"}]}]], "Input",
 CellChangeTimes->{{3.739563070383367*^9, 3.739563091436167*^9}},
 CellLabel->
  "In[229]:=",ExpressionUUID->"25671e59-24ce-425e-9593-63385f2e0139"],

Cell[BoxData["1.`"], "Output",
 CellChangeTimes->{3.739563092495398*^9},
 CellLabel->
  "Out[229]=",ExpressionUUID->"0e268855-a018-41a6-b692-9d3a97e51159"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"Another", " ", "common", " ", "loss"}], "*)"}]], "Input",
 CellChangeTimes->{{3.739563221060128*^9, 
  3.739563229640355*^9}},ExpressionUUID->"77eeac71-1a25-4ea3-96bd-\
19f60ede45c3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"loss2", " ", "=", " ", 
  RowBox[{"MeanAbsoluteLossLayer", "[", "]"}]}]], "Input",
 CellChangeTimes->{{3.739563232910203*^9, 3.7395632426708508`*^9}},
 CellLabel->
  "In[230]:=",ExpressionUUID->"19c42d61-6053-48b8-84db-6da443d8f63b"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["MeanAbsoluteLossLayer", "SummaryHead"], 
       "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = True}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014705882352941176`], {
                 RGBColor[0.33, 0.33, 0.33], 
                 Thickness[0.015029411764705883`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 18.5}, {14., 18.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.557, 0.557, 0.557], 
                 Thickness[0.015029411764705883`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{52.5, 18.5}, {44., 18.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.85, 0.85, 0.85], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{22.23,
                   18.5}, {33.5, 29.77}, {44.77, 18.5}, {33.5, 7.23}}}]}, {
                 FaceForm[{
                   RGBColor[0.56, 0.56, 0.56], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{33.5, 30.29}, {21.71, 
                  18.5}, {33.5, 6.71}, {45.29, 18.5}}, {{33.5, 29.25}, {44.25,
                   18.5}, {33.5, 7.75}, {22.75, 18.5}}}]}, {
                 FaceForm[{
                   RGBColor[
                   0.43900000000000006`, 0.43900000000000006`, 
                    0.43900000000000006`], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}}}, {{{53.56, 15.4}, {51.88, 15.4}, {50.52, 16.76}, {
                  50.52, 18.44}, {50.52, 20.12}, {51.88, 21.48}, {53.56, 
                  21.48}, {55.24, 21.48}, {56.6, 20.12}, {56.6, 18.44}, {56.6,
                   16.76}, {55.24, 15.4}, {53.56, 15.4}}}]}, {
                 FaceForm[{
                   RGBColor[
                   0.43900000000000006`, 0.43900000000000006`, 
                    0.43900000000000006`], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}}, {{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}, {0, 1, 0}}}, {{{53.56, 21.83}, {51.69, 21.83}, {50.17, 
                   20.31}, {50.17, 18.44}, {50.17, 16.57}, {51.69, 15.05}, {
                   53.56, 15.05}, {55.43, 15.05}, {56.95, 16.57}, {56.95, 
                   18.44}, {56.95, 20.31}, {55.43, 21.83}, {53.56, 21.83}}, {{
                   53.56, 21.83}, {53.56, 21.13}, {55.04, 21.13}, {56.25, 
                   19.92}, {56.25, 18.44}, {56.25, 16.96}, {55.04, 15.75}, {
                   53.56, 15.75}, {52.08, 15.75}, {50.87, 16.96}, {50.87, 
                   18.44}, {50.87, 19.92}, {52.08, 21.13}, {53.56, 21.13}, {
                   53.56, 21.83}}}]}, {
                 FaceForm[{
                   RGBColor[
                   0.43900000000000006`, 0.43900000000000006`, 
                    0.43900000000000006`], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}}}, {{{13.56, 15.5}, {11.94, 15.5}, {10.62, 16.82}, {
                  10.62, 18.44}, {10.62, 20.06}, {11.94, 21.38}, {13.56, 
                  21.38}, {15.18, 21.38}, {16.5, 20.06}, {16.5, 18.44}, {16.5,
                   16.82}, {15.18, 15.5}, {13.56, 15.5}}}]}, {
                 FaceForm[{
                   RGBColor[
                   0.43900000000000006`, 0.43900000000000006`, 
                    0.43900000000000006`], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}, {1, 3, 3}}}, {{{13.56, 21.73}, {11.74, 21.73}, {10.27, 
                   20.26}, {10.27, 18.44}, {10.27, 16.62}, {11.74, 15.15}, {
                   13.56, 15.15}, {15.38, 15.15}, {16.85, 16.62}, {16.85, 
                   18.44}, {16.85, 20.26}, {15.38, 21.73}, {13.56, 
                   21.73}}, CompressedData["
1:eJxTTMoPSmViYGAQBmIQLd/6OnCHnLaDx8MqkXXspg4MINCgA+efPQMCug6H
v2rE9B8ygYgf13MAa3M1gYrrQ8WNHdJAQM3AAcR1V0TwC225ri8uMILzwfqY
DB2qgcoe/tJ1MAaBzfoOMPfA+GBtezXhfIg5GlB1Bg7fQNaXqjsAya8acwwg
5lWpOcyaCQSShhD1H1Qh/jqA4MPcA+ODzbtnDHGXkwbc/+jhAwASgHiO
                   
                   "]}]}}, ImageSize -> {40, Automatic}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"tensor\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Target\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"tensor\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}, "RowsIndexed" -> {}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014705882352941176`], {
                 RGBColor[0.33, 0.33, 0.33], 
                 Thickness[0.015029411764705883`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 18.5}, {14., 18.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.557, 0.557, 0.557], 
                 Thickness[0.015029411764705883`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{52.5, 18.5}, {44., 18.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.85, 0.85, 0.85], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{22.23,
                   18.5}, {33.5, 29.77}, {44.77, 18.5}, {33.5, 7.23}}}]}, {
                 FaceForm[{
                   RGBColor[0.56, 0.56, 0.56], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{33.5, 30.29}, {21.71, 
                  18.5}, {33.5, 6.71}, {45.29, 18.5}}, {{33.5, 29.25}, {44.25,
                   18.5}, {33.5, 7.75}, {22.75, 18.5}}}]}, {
                 FaceForm[{
                   RGBColor[
                   0.43900000000000006`, 0.43900000000000006`, 
                    0.43900000000000006`], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}}}, {{{53.56, 15.4}, {51.88, 15.4}, {50.52, 16.76}, {
                  50.52, 18.44}, {50.52, 20.12}, {51.88, 21.48}, {53.56, 
                  21.48}, {55.24, 21.48}, {56.6, 20.12}, {56.6, 18.44}, {56.6,
                   16.76}, {55.24, 15.4}, {53.56, 15.4}}}]}, {
                 FaceForm[{
                   RGBColor[
                   0.43900000000000006`, 0.43900000000000006`, 
                    0.43900000000000006`], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}}, {{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}, {0, 1, 0}}}, {{{53.56, 21.83}, {51.69, 21.83}, {50.17, 
                   20.31}, {50.17, 18.44}, {50.17, 16.57}, {51.69, 15.05}, {
                   53.56, 15.05}, {55.43, 15.05}, {56.95, 16.57}, {56.95, 
                   18.44}, {56.95, 20.31}, {55.43, 21.83}, {53.56, 21.83}}, {{
                   53.56, 21.83}, {53.56, 21.13}, {55.04, 21.13}, {56.25, 
                   19.92}, {56.25, 18.44}, {56.25, 16.96}, {55.04, 15.75}, {
                   53.56, 15.75}, {52.08, 15.75}, {50.87, 16.96}, {50.87, 
                   18.44}, {50.87, 19.92}, {52.08, 21.13}, {53.56, 21.13}, {
                   53.56, 21.83}}}]}, {
                 FaceForm[{
                   RGBColor[
                   0.43900000000000006`, 0.43900000000000006`, 
                    0.43900000000000006`], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}}}, {{{13.56, 15.5}, {11.94, 15.5}, {10.62, 16.82}, {
                  10.62, 18.44}, {10.62, 20.06}, {11.94, 21.38}, {13.56, 
                  21.38}, {15.18, 21.38}, {16.5, 20.06}, {16.5, 18.44}, {16.5,
                   16.82}, {15.18, 15.5}, {13.56, 15.5}}}]}, {
                 FaceForm[{
                   RGBColor[
                   0.43900000000000006`, 0.43900000000000006`, 
                    0.43900000000000006`], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}, {1, 3, 3}}}, {{{13.56, 21.73}, {11.74, 21.73}, {10.27, 
                   20.26}, {10.27, 18.44}, {10.27, 16.62}, {11.74, 15.15}, {
                   13.56, 15.15}, {15.38, 15.15}, {16.85, 16.62}, {16.85, 
                   18.44}, {16.85, 20.26}, {15.38, 21.73}, {13.56, 
                   21.73}}, CompressedData["
1:eJxTTMoPSmViYGAQBmIQLd/6OnCHnLaDx8MqkXXspg4MINCgA+efPQMCug6H
v2rE9B8ygYgf13MAa3M1gYrrQ8WNHdJAQM3AAcR1V0TwC225ri8uMILzwfqY
DB2qgcoe/tJ1MAaBzfoOMPfA+GBtezXhfIg5GlB1Bg7fQNaXqjsAya8acwwg
5lWpOcyaCQSShhD1H1Qh/jqA4MPcA+ODzbtnDHGXkwbc/+jhAwASgHiO
                   
                   "]}]}}, ImageSize -> {40, Automatic}], 
              GridBox[{{
                 ItemBox[
                  StyleBox["Ports", FontWeight -> Bold]], 
                 ItemBox[""]}, {
                 StyleBox[
                  TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"tensor\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Target\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"tensor\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Loss\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}}, 
               BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}, "RowsIndexed" -> {}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("MeanAbsoluteLossLayer[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.73956324315589*^9},
 CellLabel->
  "Out[230]=",ExpressionUUID->"0dd47fe2-0477-4589-832b-7e5374a74ad2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"predict", " ", "=", " ", 
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"\"\<cat\>\"", "\[Rule]", "0.2"}], ",", 
     RowBox[{"\"\<dog\>\"", "\[Rule]", "0.8"}]}], "|>"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"target", " ", "=", " ", "\"\<cat\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"CrossEntropyLossLayer", "[", "\"\<Index\>\"", "]"}], "@", 
  RowBox[{"<|", 
   RowBox[{
    RowBox[{"\"\<Input\>\"", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"0.05", ",", "0.95"}], "}"}]}], ",", 
    RowBox[{"\"\<Target\>\"", "\[Rule]", "1"}]}], "|>"}]}]}], "Input",
 CellChangeTimes->{{3.739563261755918*^9, 3.739563397140482*^9}},
 CellLabel->
  "In[240]:=",ExpressionUUID->"7c1d5da1-e4c6-4af4-81f3-b6caefe15772"],

Cell[BoxData["2.995732307434082`"], "Output",
 CellChangeTimes->{{3.739563352359833*^9, 3.739563397516658*^9}},
 CellLabel->
  "Out[242]=",ExpressionUUID->"a39eded2-da98-4bc7-9d22-3d2ab2f9a1a5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"plot", "=", 
  RowBox[{"ListPlot", "[", 
   RowBox[{
    RowBox[{"List", "@@@", "data"}], ",", 
    RowBox[{"PlotStyle", "\[Rule]", "Red"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7395639675208387`*^9, 3.739563989197032*^9}},
 CellLabel->
  "In[256]:=",ExpressionUUID->"073545ce-598d-415d-82d3-8a86e0397a6a"],

Cell[BoxData[
 GraphicsBox[{{}, {{}, 
    {RGBColor[1, 0, 0], PointSize[0.012833333333333334`], AbsoluteThickness[
     1.6], PointBox[CompressedData["
1:eJxTTMoPSmViYGCQB2IQDQEcB7rYty25bH7RPg0M2A7caI01XJZxYP/ZMyDA
cuDok+cXJlqe228MBswHVvntetZz8qz9rJkgwHiAxzVs/lT2q/ZQAw+cVfva
GXNmx36w9jN/9pe6v9rVue7UfrDymT/3L9r68KX+hytQ+77td7jt/HdJRro9
xPzP+3PqZ75KXn8aat6H/YFO59zd/B7azwDrf7n/4kO70xav7tobgNU/3n/n
3Q/PLrXXUPmb+xdUbJqWW/zJfgKYf3L/g6cnDXclvIe5j8Hts7zp9yPv7BdA
5O3fOD9r1Dz9Bsq/aS/yO85v+o+n9iYQ8+3PxPG+3rHouf0ciP328xX+nLR+
dAfmPnu11lePnVZfhKr/bJ+t8KmpS+a6fQbEf/Z5DMcuRBttger/aV+w7Vn3
n6mF+y9Awsf+nNb3oByx4/uhznNI1uhdxyu8CRa+Dvn5QRcFv+2Fms/s8PbG
8bdhijvtz0Hix2En4yYle4ZzUPvYHPbPTHPh6p4PNY/DIcY+WVqFc489ADYo
7zo=
      "]]}, {}}, {}, {}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-3., 3.}, {-0.23613188457946968`, 1.1531806837661307`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.739563989988247*^9},
 CellLabel->
  "Out[256]=",ExpressionUUID->"3fc75dc3-8ba4-4f93-b504-28b42fe79cf7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"net2T", "[", "x", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"-", "3"}], ",", "3"}], "}"}]}], "]"}], ",", "plot", ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.739562873302095*^9, 3.739562937164798*^9}, {
  3.739562977549842*^9, 3.7395629778834*^9}, {3.739564010413781*^9, 
  3.739564030282786*^9}},
 CellLabel->
  "In[257]:=",ExpressionUUID->"671099aa-1bc1-4fea-afc6-ab3cabc91866"],

Cell[BoxData[
 GraphicsBox[{{{{}, {}, 
     TagBox[
      {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], 
       Opacity[1.], LineBox[CompressedData["
1:eJwt2nc8le8bB/CTCClfoUFCZCTfUkaLrtOkJS2piJQmFV8rrUPKlhYZ5dgc
FaWs5D72lr0yTkIyzpAiq9/pvn//VO/X57qu+37u5znn4fVqufXVQzYCFArl
Cv+Pv3+fSQni/PkjzOT/kzJjXgrSk7Kqm6ewmY67SqFwV5y58zi21fCaUlDt
zCob4mIr9gmUwsC8rzGtX7DpfxJL4NolXbO0AjIv+2cx3FZpY57zIvW0h0UQ
Fq78qEocm2Vdnw+RXd5XD4rOwevtWJ8Ni2oOH1i5UOivaRqGqVBqcnhHhYog
nudQ8xw0nknG5SwnLqE+B/+uWqHXy4jt30SAyRWTkqCFxBWPw6HFb/8eUyHi
N+ah0F9saPKlZzb2hT9PQMRA33wshthqkQ9c8pzM6Y8kPiLuDZUV2cvawokp
wl4QdGJjV85j4rAJT1jiqmftcZf4yiAN1NO0Lsw/Q0zvswejlSqOykrELdcv
InNh9ooT8sQ1PFt0rTe9MUiW2F/7GgqJMlo/I0msFfsf6pOxnWiZTbzkPzfk
OTeNFtgrgF3ZfRflDVIDficSj+0PQg1lolu04oi3pgah/oQ69rko4iWSD5HE
2bMmDaHETxseIqt2L6kUX2KXI4/RTGV16Flb4nAIRptem8d/WoNNG2CGo1eN
ElrvV5FcWS4CKU4XZoWpkbzLOQLN2fdvlY0CyZM1nqO679M/JsWJi/1eoEsq
kVvV2bPw/fYLpaOOfYcr5g9g0z7m05GJo/DRH73YlIhBOtIruHoht4Pkj/Wj
kMBp6oMjVdhUwc9RKCziSzvtJfFX0Rg0v/DpuXOJpN9hdQyiDe7m7o0lTjwU
g85tejt7cQSxblgMWtfiofHKjzhdJRaVS61wbb1EPGd1HDLY3DILnSPzY/bH
oVRrf79Ya+IR2zgU/Gb0xdUTxKmMOGR9oKhIaA+5PlOleDThe05q3UriDQIJ
6LXn1SINFVK/Wy4BWd92dVFeTtYT0EtA5fa+n6VlSO5+IQGFmb2OGRMh159V
loCMD2Uc5QqS+l1fEpDAPqbwdwqZbzeegC5B3eW2cQqub1ZJRBtVf2l/7Mem
pt9MREMKf3rf92Az6Q8TEV1G5NlrFqnXjE9EIvNlpyJbSG5VnYhafhgUepRi
Uz7IJiHXvHtHjBJJbhaThDQ/BM7ZGkvyb2+TEOtdSOZGOrFCfhIySkySW/WM
+GZXElr8oKpnvjfp/3cRA5V7NwXP8ST+rcRAtz26jP7cIfu5uIaB+px4L7ku
pH+7IQOlmy90qj9P8jIHBrpkKq9WeYb0F99kIHkTtdZCS1Jvc5+B7m/faJB+
jFx/8DMG2mSwjfP6MMk1oxiIrbc3KuHA/683iYFMNSyEQg3JfGYmA81dcS7j
4XbiHsRAucuuXvQF0v+qmIEcFrsuvbuZWLqKgVQXuFfdWE/mKdczUNtc3zuO
2qS/roWBAgUfr7VbQ/aj3slAP8din55SI37/jYFOeGeERCiT/teDDMRcUh7a
pkDmH+Dw5ye1hy+RI44eYSD/jZznpkvI/OifDDRSNov+RJr07x9noGMnpKPr
JEj9uwkGyhlQjZWYT+rfTzGQ0o2N8caiZP0rMwzkLbYv0V+I1Nf+4Z9P+ClG
+SySt1GSUYJZt9mCqT/obz99VjJyuC5sETCKTREXSEZbwjRPiw5jU9X4Fv1w
0OZeL6n/xq9v+Ox8cVYn8Qm+6VPhdreaiJ35822X5dn/ribz9Pnrr9/S5+RU
gs1MnWYgAUsxNx4i82smGaj6jtZtu0xSH/mbgcLoRz2+p5J588YYyCbP7b5N
EqlfP8pAWt2Rvl+iSE7hMdCUQFGgRRgxbZiBSpUHHrU+Io76zkCPd/wTctSP
2L6XgU7Z6ITX3iXrDbAYSOP+8cj9N4nntfPvZ/ztmDJHUt/UxL9/JTEJO+1I
frSWfz9E2SkGp8j1bC/in7+G1LssU5Jn5fLPe8+GTN0DpL8+g4E8/T2Y/1LJ
/iX4z6fJq4TCpA0kV+M/v0urK0tV1pL+Yf7z/fafxbXLlEj9eS/+50lLvzFU
luQrbzPQ7oOnWxdKkX5/RwZiPUr+Ml+Q5CesGEh8EXVkuncGO0+b//zq2fy6
3olNy1NjoLhjvhM/m4jPLmUg/dAGAXYJNjNhFgNdlLso1ZlE+ifLkpCOQeDi
E9HYVN0PSYhyKm1pUxjpl3yZhIIjp5Wr/Uj/R/8kVKj0SCfXjuQtu5OQcVPA
QIgN6c/RS0ItPj50ewsyH5ST0BCXNk9lP8mHJhKRFLra46dJ+o/EJaIIh8th
NiuIewMTkarqeROQI+uJuCaiTQGnckbEyDyR3YnI+uT+J8cHp7F/9yagIfHd
e7S/YtOUKhOQc/4OyvzPxD1vEpDvSn1bZjnx0psJ6M2Yxg41Bjb1llgCojwR
GR29QPKwhfHI11CQUW1F5g+PxiHpyT+WiWbYzIb6OKRuPVZx0ojkh4Pi0AGt
vph8NTJPQTAOvagsOBzUN4Xd3xSD1GlI9FInNsU4JQa91f6AtjeRfJNXDCoK
e7tqrAibVqYbg4YuRM0+FUecHRCNNgvdSVt1lvTfVY9C6n0BokHmxNNTdLSo
JMJy9Ag2U6qWjrje2WIfd5L5iq50FD/v1xljNTJP724kkpS2k7YfmMT9sp4R
qF/ppFP6NeKTI09R0+xLFbIXiaM8nqKCHtfld05j03ZIPkUv4oOrDA+RfMWa
J+iwRp1KqzbxC8tHKHft7qbJXxPYNesD0BPq+vVbbxFrirqh2cWcjgon4swf
Lshhb6Kn6RViz89O6KCpTN1lS2KtaHskbjtpG7yVuFDGGnmHoOhBIeJnxqfh
JttQPDjwN/bLxV5wJsKsdyByHNtwDR2C3n0zqA/Bpj15QIfcSufgDw+I93Dp
IDv9xND/DnHh2yiosahN+teS9O/Uj4EtCnuuXJMnZlvFg0z05rGfEWPkvNgv
4VOCvOissF+4v9X9PcjPS12L0kdxfk4oH+Yq9n36zhjB90PJrxzaI0QqWNHY
lHuvyuGVzKri5jBsq4FP5WAidS2nyBebVitdAcFzJhKjLmHTf76oAKXh+R7H
NUh95rtK2Jytq1OWxMP3f++3arA9cu9ZYiIX19/MqYWomWxtjShsqlZ1LTQl
cquTQ7FpvK5aoE6fFErxxVYMnV0H0vHrHN7bYlP89tbBx7GuvflaJKd21oGc
ntNMhj3nr1l3FzTAfV+WzgdrYnuVBuB27r2cexjb6vrGBij0Umop1CWuP90A
dq2f3tT+ZuP9FaY1QO5NDZtBd2yKtEUjWBV0Vcg/GsbzLpY1gaHBuE2HO7HP
1yZYnSFBibDHpnZMN8EUY6uOzMFh8vnXboZnj2IipCSwmXr0Zqg5fd5OJHAI
r29xrwUyPt8RLrmFrSgX0wIvjj6LumeHzZLLawHb3WWNAvuxmb3TLSCydtWW
aTHiTLdW2ErhiI/4DOJ5mh5toO4mnJR6HZt+PbYNJEYVtl+9iK24qKQNOr+Z
uAwZkXzn/M/g9ultV58wNi3k+Wd4+8I59fO9Abw+s7odlAxmDha5f8frXXTt
gpoFBpqhDtisnTFdcLvvxhy7M8Ru1V3Q9uB3tvTO7+T7UJIFj7tHlc+KYNMe
2LJA0Hvwp8CDfvJ9rP4F+upaQqkR38j3YV43PElY7CgdgE1d1N4N226aGvff
wmZuHOuGFyoNAkGWpH7i369wzPXT5S4lbMqh51+hdFmxwe2kPlzf5dEDSRfS
vnxI78W+crYPGqwjFfbG95L7da8PKBZ+Fm1PSW6Z0AemB8+0jjuSPHSgDwQ2
SdXqahNn2n+DE2L/MVNSevD6x9z7Ye7rdZExiV9x3hY2ALqJ8h3rnhF/+DAA
VtFzl+Z7Ed9qH4D04O5g1jlsZtiyQbC+8yhwmQo2RerFIGSbjNwKierG9Q+C
h+DSjzfmfmFfcP70JBtC9Xibz/tiMxWd2FB6XWvpdjdsmnUgG1QoKa0Tx0m9
KJMNrHkvTS/JkPoCBQ6Imwzq7hIl5uhxwOCxxkKl3yzcX7mfA2EySfWtLdiU
YDcOHFWNN9n9DJtqVsMBz4u9a1S8Sf1EDwfevlzxzyxXbKbRbw5IaMdUZR7D
tnKS4EIF0PeoLybz5PS44P5Wx0dcsws/f+euc6FzQ5phsRi21T/uXNBHa+fc
HuzEz2uANxd+Vay+O8zoJO/fEC7Y9qrfqlyJbSXwlgvllxM2e4piU49lckFt
RGVi8/cOnHvkcqF7RsklOZH4ZDkXzJYss/dVw2bKs7iQ/iJ8zTZhbNbKXi5I
qciyf/e1Y88b4EL12sWXL8YTn/jBhVWZT1cuv49tVTzGBe8t0v0tNtiKYlNc
2L53gY2RCjZFUZAH9NoHyhQhbCZXmAczx8S7M3o+4zxCjAeZZ8Us1WKxrdwl
ebBo0GdZ111ses5CHvxnL9IefAabWr+EB6tvCx2fo4yt+ESeB7LZNSH9giSX
XM4DoV/hTeV9bTh3UOZBu926Iw8Y2FbNajwoTZp+ZO/fRp7/lTxI6y2tPXwF
m1m0ige+FpYHlqwj9dQ1PHAO1QickMKm1Gvx4HTjz8r2n614f7vX8WDfgjwx
1IzNjNXmwYb9/nuisrCtenR4sMLnmM/dcGyWiB4PJIqUSm1uEUuu58EUhT3H
yBKbJrCBB9/0s3ZqbCVu4bvO1dNznjLxk408yH13oIAtSNZbv4kHDK6sQG1f
C56Xx3ewZh81rRSbrr2ZBx4X3tx5ymghzxPfdrE3c138iav5NmMZTh+/gk0b
53uHnJS+vgnpF9PngZZZp5v8OjJfmO+lT5KyKNLYzGF+/Zwax/Hun834fHL5
HhGjri9qxlZ05bvTUMw5IYvky/guu9v0ziec+BV/v+9Q1I/Lt7Cp6nzTJ23X
GVs2k+9L/vX6r99gr7UVm9XNPw+X/2anSioTK/FtnVLNHhUk9Qf452k8GPpv
c18TnneRf96b1Gxss0qxKfa6PFA9o5Uczmginz/+/ZluK1a3uoJtJce/n/2L
Hp3fZoLN7ODf74ZDFvEr1pE8kP88vCz/ofz9ZyOehzR5cCJbUcHhFjbzvCoP
dv0atDhiiU19tYIHa9dlROhtJe5V4oEIY7/spCC2oqYCD9JD3RZ6+jfg/Sxf
zAOp6w1iweH12Dz+52f8z+8FHDdsyh4B/nneV1hidAKbGfKHC4lPLq2YWILN
WjjBhS2pFINTwXXYsWwuXPymeUX1YS3uN2/iwu3kuVF28z/h/ZyM5sLurKOv
FCqrcS4SyQXpEnpWrS/xu3AuJHXr1emKYFPnPuVCg8yZ2TMCVXj9DC8uaHh/
sAkcL8frUe240HzWViPlazGu37SJC7kdJuvT47HpFuu5EG+qu+PjRWxFTx0u
OBrNWFRwivD961jNBQnNoIffJgvxeecp8/f3I21cQboAzz8pzgUt22dCas35
2AViXFjSe1NydRg2Za0oF/qadmrqK2JTZQS54JHdbGmmmYe9Z5QDTrPHApb7
5OL1TlVzYMdPlLDmH2zKpzIOSH7zzjN4+pHUF3Hgdbnsz+NROeT9mMOBvodb
zB9lZWMLJ3PATPG+xuyBdFLvywEXN43AsqevyfNgwgFjNrcpJf4Vtib//aJq
naEQnPESe2I3Bxp373hj3crA+3mznQPaMqcaJuUS8H6813Og86qyrrlRJK7P
V+RAwLHUYvVLz7Hny3NAHwzMfvqF4/rTS/nvL/FjNwI/heB5cos4YPrKN49p
GoQ9IMaBmpfyXUcOmeL68nE2CJ7eq+i9fQv8nef+iw1Jq6Nd5mVb/zUFRtnQ
0XoxJcrYFbuSwwaXlP17h5b4Yat8Y8OOMAhdcDvir6kfmtjAeLCBGqv1Cs+7
m8mfXxiZI6zz+q9p/ulssByfs/Hy+hTcH/KODb6pA0tkIlNxf0oqG7bIZC1g
xb3F+WAiG+IHjs6+kpaO550OZUO9p0+egm4GnmcbwgaKwsc7tenYFKenbDhx
eMWUTnYmrvd4yIZ/ckZGJ5nZOKf5sME14EGfT3UuXq/dlQ1xagWxm00QnvfO
mQ11eb+sh2uxqd6ObFg0+fpq4iUmnqdwjQ3X1iwaEruSh/O55/k/bzzr6alz
LMDznx9mg77NTEHye+L5B9lwaN2SGM9fxE7GbKBV7j2t51qIrbGbDW2UtI7Q
G0XYalvYEHjRvcnKowSvt1GVDd4Vs9735GJTtiqzweNfj8cXJrFpWxT594Pn
YXLNsRTnMrJssLruWX7nXBn2vvlsWOvjlftiTwW2O28YNAeFnyt5YVM/DQ+D
6n7vG/EFJF8wMAyyC3w2vNavxLld9zAIhPq+/bi6ivTXDUNDYkB8u+Qn7PGU
YaieK37P6gDxmeRhKLUNPNPjh03LjR+GU88MJZwFavC8Xc+H4bC5UdWtG8SP
fYZBv2e3YYBdLfZsy2HYuNBX75MfNsX6+DDo7SpXWcAgecrhYdBK3CP4tA+b
Jmk0DCts9+ZFWNbh85pYMwzzR/dtfnmwHtfrTA2BRNu6My4O2MxPo0MgzVzi
t+0xNuXw8BDI+ve0tTSQXLJzCNRX3HQTMmvA+dXcIdh2JDnr1KlGvN5NtyHY
uenhl5V3sJl+9kNgpOgi+jOykZzPhSE4MLTtuN8Xki8zHQJzz7bxjLNNOJfT
GgLnd6IbFlxuxrl01yBcD+NYtvthU9waBuEmrdEr4SXJC8oG4e6+qGYDNsmF
3g1CUM8Gl0v2LTjX9xqEZOkL6QUurdhO6oPAcizWcfb8jK//x9EBaC8Vkk2M
xaYpGg1Ai9zOP62FJNfeNAA1hQVlBkLtuF9EfgCY0nmnhO5jU1x6vkPkuw/e
T7w6cL+j7Xc4NZra/ta3C+cZF/uBnbU/36X0C/YK5T5QES1xvNGMTVu4oA/M
zahqd/qwqRMzvVD+a53/fcFuvN7ztl6I015i+pSKTTvysBfMX3V/f5tJ8pyp
HiinuyxgJ37F/WZVXyHeK8rqrE8vdoTNF7B6Y5fyMhSb2WHyBWQ/b5wZTcKm
rdD/AoGr68LvlZO8UPILODcKNMeL9eH8BJMFu5TP7v8egM1UWcaCvlzVTVce
fftren9uB9D7R7zTo7EVlZ51wAlJ1DzzFpty074Dqm2OOT2ox2YFruiA9Hne
qanS/bh/u3873D/xXfVHMLGF9WdQ+ZUs5Rr+HVtdsxWWFB1USmZgK16b1wpz
n4xpdWYRdwy1AHftduMdLdgszdctkGPX5i2xcADnseta4EivyExiIDZ16fZm
8Giw6W91H8S5yt1GcIoRG5v3EJvlf6ERLji8EaLSiRWMG8FYYlopPpe4UKYR
ZPY9sXCYxKZLpDVAakF+3VynITzv1XA9dL5V+Lj5wjCuL/Oog6oNDhpKLti0
Qbs6yMktDBG5T3Kd43UQXn7RoTEG24qqVQdm3WlqV7uwKWtZtVC7wOhRtCkb
z7cxrAVmSNgfbxts5rhOLaQuG7a96ojNeqtUC4ErHxnqP8KmPZupgT1b26ca
q7DpKzJroPDatfOiOzl4vZXraiDtV34D5zA2bZ5SDUTfXLityRqbJSVZA+7e
2XIxNJIv7v0EW+iCdfo52NRtlz5B+/l98pkyXLyf8+7VcDSE5T0YhE3/j1UJ
gYZp82eFYlMuFVdC6di9R4uisBXjXlbCJrNVEVvfkH729UqQl3FOCanFZqUs
roT+MLGm7fzfe/72B1hWwPK9nSeOyxIn7K6AE5OpXVeUsJl/tCug8qTp99B1
2IrnRSvgjVzUFOcQNmtuRjm4vdBTjniMbaW8rBzSjEUT34Rj01hzy2Fo5rNm
SQzJG8bL4JSlu95IGlnvZGMZbFes3G3UwCPvx6AymBd9+tqo9Ahef9OCMth5
SOen6DJsirxAGdwWEHZTUMGmav0oBa71y7t7dLEVuxpLoVF5LJh+lPQbPy+F
F3H+H/cFY9M0dErBUX1fdPNz4iD1UtidLOZlHUcss6wURlN9TVzfkf4Hc0ph
b47315g6st7szyUwXucpOin+A+dFPiVQfXQH+94iYlVaCcS0zK6XkMe2inYu
AeNOjwjVf7Gpw2dKIPY7bc2hvdiK1VACBym3jiZ5kdx5qhhU7+pv0nnwg3w/
jxbDlNCUPAomDhkqhkSxG/0NcWS9hR3FMLPo+g1KITZNBRUD41+nqGOUUWxD
r2Kgperc7xbGZiXQiuGo9uglu39GyfvbrRgoG//TuSuPTd9gVwzHdtiXvNYn
/YeOFIPgSbthoevEeSrFsHSvqaK2O3GhQjGs2wyHrXzIvEaZYrBauiArO5Tk
WuLF8PHzO8+r2djU1LEicDafWto6SfLYqiII2NdrPEfwJ3ZMaRHE6le7a88j
fl1QBPVy9G8BctiUkawi0OrYnrbNAJspkVAE3y389ry8Tex0l/9zjbHjrdb7
pF73ThEs2WKROucByX+7FcEu+TWLTkdiU6MdiiC6s+7LQibJrayLwNxS9vqd
Wb/w+hbbi6DaKinhkCe21ZRoEXgo39n00w+bWjanCHT7jlSFPMamPJtdBBGX
KT/ao4lhuhAuOx/bcj6P1L/iFoKIv1DjjRmSjzQXwraM0wJxrmPYexIK4df1
9U8NaWPk+yC2EJL056sPeJF8Y1QhSORn7l8TMkbeN+GF0FX5T2jWe2zmSGAh
3Oz+uKZ6hOSmzoXwfr6sxZjtOO5P3F4Ifat2Rf7nSOxKLYQlexy+cG5gs3YY
8Pvvl9v0+2JT6/UKYccftyuticRVKwuhjvv5zocebJrSP4XArn8efcf8N3Zn
UwEojpT1TJ7BpujUF8AhiV+qrpeJ738qgPf7jJOvuWFT5UsL4GbRTNrpZ9hM
6awCmJthWbS9gdQvDCsA1bDl/cL7JvB8ZbMCCFVxcVU9gm11/XABzHtTKbLT
HJtabFwAP0pcVnrYYlP27SwA5s+qS1P+2EyRdQVw8qDbMLeK5DpzCyBIpH6k
9cAk+fy/z4fZT9Tvjh8j9k7JB2eF21KLrbCtuEn5YKG3UufINWxmwot80Dh7
x6k6iPiDVz4UoVXj+bXYrP/M8mHC2XM6+fAUnvf7Rx7MbSwehpPEHcN5IKst
2llvja2Y8y0PNnICciftsanWn/PA9XzInb1B2PQT+Xnw6xhj1mAlNmUiMA9G
NtQIaeyaxut9V8qDwYml4okbZnC/qy4T9Iu99nVSsZkcTSYEPvzhK70bm2K+
ggla6hXC7sexrRSlmOB81G3WCTfSf5/F/70ktWVULId44iCCRTZPP1+FP3i/
D9VzgX7eq2GpMoX6N78b9wFEblyoUFYjLgn6ANcCd+evWoVNmbnxAeC9WOpm
bWymwaEP0CkQ5HdyOzZ93kw2yL14ti38DHH/oWx41pCUKhuLbRXLy4SgrZX+
Miqz/ppWKpgO4leTtxUsFMDzGAKpkLsj82O67Gyci/lHwbSdpZ6puCBef2rG
GWYJ14WumibmNj1DekYO+Xsoc7BXt75CE+0v+xeOYNM2n8pAO2xLg/b/IrmH
ZwYKmPy64d4EcRUjAynKLvUZFRDG1+swloEMj/msrJfCpnGDMtGTWptLQbrY
zNLCLLS6WH5o7nVsSvCaHOR6dNOTbbeIz5jmoLyeo/pu7qR//a0cdGR2gP93
H9LfX56DblAnNUvDiF3OfUSl2c1293JI//4XuUhyz4+FH5mk37QoF5m3iueO
FpL9nR3KRZyxneJnq0juvwmhRbrvXm/rJP2zmhGyKvxk6tZN6jVmEEo6PDjz
pg/bKkGSifQdlA4s5xA3b2Si+7O2jJn9wGY57GeimqDjkUFjZN7800wkq+hk
WDpJ5iU7MtH//z8b7jfyZqL/ARJMTrE=
        "]]},
      Annotation[#, 
       "Charting`Private`Tag$1922924#1"]& ]}, {}, {}}, {{}, {{}, 
     {RGBColor[1, 0, 0], PointSize[0.012833333333333334`], AbsoluteThickness[
      1.6], PointBox[CompressedData["
1:eJxTTMoPSmViYGCQB2IQDQEcB7rYty25bH7RPg0M2A7caI01XJZxYP/ZMyDA
cuDok+cXJlqe228MBswHVvntetZz8qz9rJkgwHiAxzVs/lT2q/ZQAw+cVfva
GXNmx36w9jN/9pe6v9rVue7UfrDymT/3L9r68KX+hytQ+77td7jt/HdJRro9
xPzP+3PqZ75KXn8aat6H/YFO59zd/B7azwDrf7n/4kO70xav7tobgNU/3n/n
3Q/PLrXXUPmb+xdUbJqWW/zJfgKYf3L/g6cnDXclvIe5j8Hts7zp9yPv7BdA
5O3fOD9r1Dz9Bsq/aS/yO85v+o+n9iYQ8+3PxPG+3rHouf0ciP328xX+nLR+
dAfmPnu11lePnVZfhKr/bJ+t8KmpS+a6fQbEf/Z5DMcuRBttger/aV+w7Vn3
n6mF+y9Awsf+nNb3oByx4/uhznNI1uhdxyu8CRa+Dvn5QRcFv+2Fms/s8PbG
8bdhijvtz0Hix2En4yYle4ZzUPvYHPbPTHPh6p4PNY/DIcY+WVqFc489ADYo
7zo=
       "]]}, {}}, {}, {}, {}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->All,
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.73956403098118*^9},
 CellLabel->
  "Out[257]=",ExpressionUUID->"94617bff-5770-4d5e-b5f3-bb378dd11107"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net2", " ", "=", " ", 
  RowBox[{"NetChain", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"LinearLayer", "[", "100", "]"}], ",", 
     RowBox[{"ElementwiseLayer", "[", "Tanh", "]"}], ",", 
     RowBox[{"LinearLayer", "[", "]"}]}], "}"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.739562956968223*^9, 3.739562971856181*^9}},
 CellLabel->
  "In[243]:=",ExpressionUUID->"9203ca38-e97a-4ec1-b93f-1da7cf289488"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"tensor\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"tensor\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["3", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{100, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {100}, "$OutputSize" -> 100, 
                    "$InputSize" -> NeuralNetworks`SizeT, "$InputDimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                    "2" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]]], 
                    "3" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{NeuralNetworks`SizeT, 100}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    "$OutputSize" -> NeuralNetworks`SizeT, "$InputSize" -> 
                    100, "$InputDimensions" -> {100}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{100}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"tensor\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"100\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Tanh", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"100\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"tensor\"", Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"tensor\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.739563535711314*^9},
 CellLabel->
  "Out[243]=",ExpressionUUID->"40587785-d6b6-4ed0-b693-6dc9d91cc0d8"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"floss", " ", "[", 
    RowBox[{"x_", ",", "y_"}], "]"}], " ", ":=", " ", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"x", "-", "y"}], ")"}], "^", "4"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7395637014344788`*^9, 3.739563701983719*^9}},
 CellLabel->
  "In[245]:=",ExpressionUUID->"b462bcc5-fca7-4c5c-b7e9-c46ec1c1b2b9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"loss", " ", "=", " ", 
  RowBox[{"NetGraph", "[", 
   RowBox[{
    RowBox[{"<|", 
     RowBox[{"\"\<thread\>\"", "->", 
      RowBox[{"ThreadingLayer", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{"#1", "-", "#2"}], ")"}], "^", "4"}], "&"}], "]"}]}], 
     "|>"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], "\[Rule]", 
       "\"\<thread\>\""}], ",", 
      RowBox[{
       RowBox[{"NetPort", "[", "\"\<Target\>\"", "]"}], "\[Rule]", 
       "\"\<thread\>\""}]}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7395637169220533`*^9, 3.7395637290358047`*^9}, {
  3.739563763420497*^9, 3.739563769976437*^9}, {3.739563812600223*^9, 
  3.739563895601309*^9}},
 CellLabel->
  "In[254]:=",ExpressionUUID->"b3e341a8-8f61-4cf4-b8a8-42e01481e6e2"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = True}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.0149], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.03], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                  18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                  49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                  18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                 FaceForm[
                  RGBColor[0.631, 0.8160000000000001, 0.498]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15., 
                  33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                  22., 40.}}}]}, {
                 FaceForm[
                  RGBColor[0.38, 0.753, 0.89]], 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                 FaceForm[
                  RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15., 
                  12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                  22., 19.}}}]}, {
                 FaceForm[
                  RGBColor[0.584, 0.51, 0.8390000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5, 
                  30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                 FaceForm[
                  RGBColor[0.4, 0.396, 0.659]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30., 
                  23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                  37., 30.}}}]}, {
                 FaceForm[
                  RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5, 
                  40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.647, 0.259, 0.08600000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45., 
                  33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                  52., 40.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  
                  TemplateBox[{"\"Number of inputs\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["2", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"tensor\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["1", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}, "RowsIndexed" -> {}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.0149], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.03], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                  18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                  49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                  18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                 FaceForm[
                  RGBColor[0.631, 0.8160000000000001, 0.498]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15., 
                  33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                  22., 40.}}}]}, {
                 FaceForm[
                  RGBColor[0.38, 0.753, 0.89]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                 FaceForm[
                  RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15., 
                  12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                  22., 19.}}}]}, {
                 FaceForm[
                  RGBColor[0.584, 0.51, 0.8390000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5, 
                  30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                 FaceForm[
                  RGBColor[0.4, 0.396, 0.659]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30., 
                  23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                  37., 30.}}}]}, {
                 FaceForm[
                  RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5, 
                  40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.647, 0.259, 0.08600000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45., 
                  33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                  52., 40.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = None}, 
                  GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    GrayLevel[0.7], 
                    
                    LineBox[{{-2., 
                    1.2246467991473532`*^-16}, {-0.9999999999999999, 1.}}], 
                    
                    LineBox[{{-2., 1.0000000000000002`}, {-0.9999999999999999,
                     1.}}], 
                    
                    LineBox[{{-0.9999999999999999, 1.}, {
                    6.123233995736766*^-17, 1.}}]}, {
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-1.4, 
                    0.6}, {-0.25, 0}, 
                    Offset[8], {1., 0.9999999999999999}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-1.4, 
                    1.}, {-0.25, 0}, 
                    Offset[8], {1., -2.220446049250313*^-16}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-0.3999999999999999, 
                    1.}, {-0.25, 0}, 
                    Offset[8], {1., 0.}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], 
                    StyleBox[{
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-2., 1.2246467991473532`*^-16}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-0.9999999999999999, 1.}], 
                    Offset[{10, 10}, {-0.9999999999999999, 1.}]]}, 
                    InsetBox[
                    StyleBox[
                    "\"\[NegativeVeryThinSpace]\[NegativeVeryThinSpace]#\"", 
                    StripOnInput -> False, FontFamily -> "Source Code Pro", 
                    FontSize -> 14, FontWeight -> Bold, FontSlant -> Italic, 
                    FontColor -> RGBColor[
                    0.2627450980392157, 0.5372549019607843, 
                    0.34509803921568627`]], {-0.9999999999999999, 1.}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"thread\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ThreadingLayer", "[", 
                    RowBox[{
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"Subtract", "[", 
                    RowBox[{"\[LeftSkeleton]", "2", "\[RightSkeleton]"}], 
                    "]"}], "4"], "&"}], ",", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"Automatic", ",", "Automatic"}], "}"}]}]}], "]"}],
                     HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["thread", Bold], 
                    Style[
                    HoldForm[
                    ThreadingLayer[
                    Shallow[Subtract[#, #2]^4& , {4, 3}], 
                    "Inputs" -> {Automatic, Automatic}]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-2., 1.0000000000000002`}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Target\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Target", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{6.123233995736766*^-17, 1.}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Output\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Output", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, FontSize -> 10]}, {
                    StyleBox[{
                    InsetBox["\"Input\"", 
                    Offset[{0, -7}, {-2., 1.2246467991473532`*^-16}], {0, 1.},
                     Automatic, {1, 0}], 
                    InsetBox["\"thread\"", 
                    Offset[{0, -13}, {-0.9999999999999999, 1.}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"Target\"", 
                    Offset[{0, -7}, {-2., 1.0000000000000002`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"Output\"", 
                    Offset[{0, -7}, {6.123233995736766*^-17, 1.}], {0, 1.}, 
                    Automatic, {1, 0}]}, StripOnInput -> False, FontColor -> 
                    GrayLevel[0.5]], 
                    StyleBox[{
                    InsetBox["\"\"", 
                    
                    Offset[{-3.889087296526011, 3.8890872965260117`}, {-1.4, 
                    0.6}], {0., -0.17}, Automatic, {0.7071067811865476, 
                    0.7071067811865475}], 
                    InsetBox["\"\"", 
                    Offset[{1.2212453270876722`*^-15, 5.5}, {-1.4, 1.}], {
                    0., -0.17}, Automatic, {1., -2.220446049250313*^-16}], 
                    InsetBox["\"\"", 
                    Offset[{0., 5.5}, {-0.3999999999999999, 1.}], {0., -0.17},
                     Automatic, {1., 0.}]}, StripOnInput -> False, FontSize -> 
                    8, FontWeight -> "Thin", FontColor -> GrayLevel[0.7]]}, {
                    EdgeForm[{
                    GrayLevel[0.5], 
                    Thickness[Large], 
                    Dashing[{0, Small}]}], 
                    FaceForm[None], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    
                    Part[{{-2., 
                    1.2246467991473532`*^-16}, {-0.9999999999999999, 
                    1.}, {-2., 1.0000000000000002`}, {6.123233995736766*^-17, 
                    1.}}, NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 20, 8, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, AspectRatio -> Full, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    ImagePadding -> {{26.500000000000004`, 26.5}, {24., 14.}},
                     ImageSize -> {163., 93.}, PlotRangePadding -> 0], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`Private`NetGraph`vpathInfo[
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "thread"], 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Outputs", "Output"]}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "Target" -> 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], 
                    Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], 
                    Association[
                    "thread" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    NeuralNetworks`Private`ScalarFunctionObject[{
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4], 
                    Association[
                    NeuralNetworks`Private`ScalarSymbol[3] -> {Subtract, 
                    NeuralNetworks`Private`ScalarSymbol[1], 
                    NeuralNetworks`Private`ScalarSymbol[2]}, 
                    NeuralNetworks`Private`ScalarSymbol[4] -> {Power, 
                    NeuralNetworks`Private`ScalarSymbol[3], 4.}]]]], "Inputs" -> 
                    Association["1" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "2" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]]]], 
                    GridBox[{{
                    ItemBox[
                    StyleBox["Inputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox[
                    StyleBox["Outputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox["\"tensor\"", "SummaryItem"], "", "", 
                    StyleBox[
                    TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox["\"tensor\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{"\"Target\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox["\"tensor\"", "SummaryItem"], "", "", "", ""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]], 
                    ImageSizeCache -> {178., {19.6669921875, 24.8330078125}}, 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}, "RowsIndexed" -> {}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.739563706483025*^9, {3.7395637554727297`*^9, 3.739563770570134*^9}, {
   3.739563847076435*^9, 3.739563896050166*^9}},
 CellLabel->
  "Out[254]=",ExpressionUUID->"3241738d-c3ae-4780-9e50-9936af382203"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net2T", " ", "=", " ", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"net2", ",", "trainD", ",", 
    RowBox[{"LossFunction", "\[Rule]", "loss"}], ",", 
    RowBox[{"ValidationSet", "\[Rule]", "trainD"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.739563544174296*^9, 3.739563710268423*^9}, {
  3.739563909245771*^9, 3.739563911338407*^9}},
 CellLabel->
  "In[270]:=",ExpressionUUID->"9a02beaf-5bbb-460a-a635-38ddf981e645"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["3", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{10, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{10}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {10}, "$OutputSize" -> 10, 
                    "$InputSize" -> 1, "$InputDimensions" -> {}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {10}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1, 10}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {}, "$OutputSize" -> 1, 
                    "$InputSize" -> 10, "$InputDimensions" -> {10}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Tanh", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.739563924447361*^9, 3.7395646141118727`*^9},
 CellLabel->
  "Out[270]=",ExpressionUUID->"a0f0ed41-f34e-4422-9ba3-529eb4145214"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"net2", "=", 
  RowBox[{"NetChain", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"LinearLayer", "[", "10", "]"}], ",", 
     RowBox[{"ElementwiseLayer", "[", "Tanh", "]"}], ",", 
     RowBox[{"LinearLayer", "[", "]"}]}], "}"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"trainNet", " ", "=", " ", 
  RowBox[{"NetGraph", "[", 
   RowBox[{
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<net\>\"", "\[Rule]", "net2"}], ",", 
      RowBox[{"\"\<loss1\>\"", "\[Rule]", 
       RowBox[{"MeanSquaredLossLayer", "[", "]"}]}], ",", 
      RowBox[{"\"\<loss2\>\"", "\[Rule]", 
       RowBox[{"MeanAbsoluteLossLayer", "[", "]"}]}], ",", 
      RowBox[{"\"\<plus\>\"", "\[Rule]", 
       RowBox[{"ThreadingLayer", "[", "Plus", "]"}]}]}], "|>"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"\"\<net\>\"", "\[Rule]", 
       RowBox[{"NetPort", "[", 
        RowBox[{"\"\<loss1\>\"", ",", "\"\<Input\>\""}], "]"}]}], ",", 
      RowBox[{"\"\<net\>\"", "\[Rule]", 
       RowBox[{"NetPort", "[", 
        RowBox[{"\"\<loss2\>\"", ",", "\"\<Input\>\""}], "]"}]}], ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\"\<loss1\>\"", ",", "\"\<loss2\>\""}], "}"}], "\[Rule]", 
       "\"\<plus\>\""}]}], "}"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.739564040673802*^9, 3.739564153408204*^9}, {
  3.739564219039762*^9, 3.739564294840375*^9}},
 CellLabel->
  "In[261]:=",ExpressionUUID->"872aa31a-2298-4d9c-8f72-bd960036fb2c"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = True}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, BaseStyle -> GrayLevel[0.6], 
                 ImageMargins -> 0, ImageSize -> {36, Automatic}, 
                 PlotRangePadding -> 0], 
                StyleBox[
                "uninitialized", LineColor -> RGBColor[0.66, 0, 0], 
                 FrontFaceColor -> RGBColor[0.66, 0, 0], BackFaceColor -> 
                 RGBColor[0.66, 0, 0], GraphicsColor -> RGBColor[0.66, 0, 0], 
                 FontFamily -> "Roboto", FontSize -> 8, FontColor -> 
                 RGBColor[0.66, 0, 0], Background -> GrayLevel[1, 0.65]]}, 
               Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"tensor\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"tensor\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["3", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}, "RowsIndexed" -> {}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, BaseStyle -> GrayLevel[0.6], 
                 ImageMargins -> 0, ImageSize -> {36, Automatic}, 
                 PlotRangePadding -> 0], 
                StyleBox[
                "uninitialized", LineColor -> RGBColor[0.66, 0, 0], 
                 FrontFaceColor -> RGBColor[0.66, 0, 0], BackFaceColor -> 
                 RGBColor[0.66, 0, 0], GraphicsColor -> RGBColor[0.66, 0, 0], 
                 FontFamily -> "Roboto", FontSize -> 8, FontColor -> 
                 RGBColor[0.66, 0, 0], Background -> GrayLevel[1, 0.65]]}, 
               Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{10, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {10}, "$OutputSize" -> 10, 
                    "$InputSize" -> NeuralNetworks`SizeT, "$InputDimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {10}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{NeuralNetworks`SizeT, 10}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    "$OutputSize" -> NeuralNetworks`SizeT, "$InputSize" -> 10,
                     "$InputDimensions" -> {10}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"tensor\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Tanh", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"tensor\"", Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"tensor\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   ImageSizeCache -> {158., {31.9169921875, 37.0830078125}}, 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}, "RowsIndexed" -> {}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.739564154772109*^9, 3.7395642334687862`*^9, {3.739564272589508*^9, 
   3.739564296878277*^9}},
 CellLabel->
  "Out[261]=",ExpressionUUID->"c2cf7f42-c040-4783-b8b3-3d37ad6c4df8"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = True}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.0149], {
                   GrayLevel[0.6], 
                   Thickness[0.03], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                    18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                    49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                    18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    45.5, 40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 
                    33.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {
                    45., 33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 
                    40.}, {52., 40.}}}]}}, BaseStyle -> GrayLevel[0.6], 
                 ImageMargins -> 0, ImageSize -> {36, Automatic}, 
                 PlotRangePadding -> 0], 
                StyleBox[
                "uninitialized", LineColor -> RGBColor[0.66, 0, 0], 
                 FrontFaceColor -> RGBColor[0.66, 0, 0], BackFaceColor -> 
                 RGBColor[0.66, 0, 0], GraphicsColor -> RGBColor[0.66, 0, 0], 
                 FontFamily -> "Roboto", FontSize -> 8, FontColor -> 
                 RGBColor[0.66, 0, 0], Background -> GrayLevel[1, 0.65]]}, 
               Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  
                  TemplateBox[{"\"Number of inputs\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["2", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["4", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}, "RowsIndexed" -> {}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.0149], {
                   GrayLevel[0.6], 
                   Thickness[0.03], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                    18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                    49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                   
                   JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                    18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}, {
                   FaceForm[
                    GrayLevel[0.9]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    45.5, 40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 
                    33.5}}}]}, {
                   FaceForm[
                    GrayLevel[0.6]], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {
                    45., 33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 
                    40.}, {52., 40.}}}]}}, BaseStyle -> GrayLevel[0.6], 
                 ImageMargins -> 0, ImageSize -> {36, Automatic}, 
                 PlotRangePadding -> 0], 
                StyleBox[
                "uninitialized", LineColor -> RGBColor[0.66, 0, 0], 
                 FrontFaceColor -> RGBColor[0.66, 0, 0], BackFaceColor -> 
                 RGBColor[0.66, 0, 0], GraphicsColor -> RGBColor[0.66, 0, 0], 
                 FontFamily -> "Roboto", FontSize -> 8, FontColor -> 
                 RGBColor[0.66, 0, 0], Background -> GrayLevel[1, 0.65]]}, 
               Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = None}, 
                  GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    GrayLevel[0.7], 
                    
                    LineBox[{{-4., 2.4492935982947064`*^-16}, {-3., 
                    1.8369701987210297`*^-16}}], 
                    
                    LineBox[{{-3., 1.8369701987210297`*^-16}, {-2., 
                    1.2246467991473532`*^-16}}], 
                    
                    LineBox[{{-3., 1.8369701987210297`*^-16}, {-2., 
                    1.0000000000000002`}}], 
                    
                    LineBox[{{-3., -0.9999999999999998}, {-2., 
                    1.2246467991473532`*^-16}}], 
                    
                    LineBox[{{-3., 1.0000000000000002`}, {-2., 
                    1.0000000000000002`}}], 
                    
                    LineBox[{{-2., 1.2246467991473532`*^-16}, {-1., 
                    6.123233995736766*^-17}}], 
                    
                    LineBox[{{-2., 1.0000000000000002`}, {-1., 
                    6.123233995736766*^-17}}], 
                    LineBox[{{-1., 6.123233995736766*^-17}, {0., 0.}}]}, {
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-3.4, 
                    2.0818995585505003`*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736767*^-17}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-2.4000000000000004`,
                     1.4695761589768238`*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736765*^-17}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-2.4000000000000004`,
                     0.6000000000000002}, {-0.25, 0}, 
                    Offset[8], {1., 1.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-2.4000000000000004`, \
-0.39999999999999986`}, {-0.25, 0}, 
                    Offset[8], {1., 0.9999999999999999}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-2.4000000000000004`,
                     1.0000000000000002`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-1.4, 
                    8.572527594031473*^-17}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736766*^-17}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-1.4, 
                    0.4000000000000002}, {-0.25, 0}, 
                    Offset[8], {1., -1.0000000000000002`}], 
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-0.4, 
                    2.4492935982947065`*^-17}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736766*^-17}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], 
                    StyleBox[{
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-4., 2.4492935982947064`*^-16}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-3., 1.8369701987210297`*^-16}], 
                    Offset[{12, 12}, {-3., 1.8369701987210297`*^-16}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.7], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.4], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, AspectRatio -> 0.7, BaseStyle -> 
                    GrayLevel[0.4], ImageMargins -> 0., ImagePadding -> 0, 
                    ImageSize -> 16, PlotRange -> All, PlotRangePadding -> 
                    1], {-3., 1.8369701987210297`*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"net\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "3", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["net", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[3]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    Hue[0, 0.7, 0.9]], 
                    FaceForm[
                    RGBColor[
                    0.9333333333333333, 0.5133333333333334, 
                    0.5133333333333334]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-2., 1.2246467991473532`*^-16}], 
                    Offset[{10, 10}, {-2., 1.2246467991473532`*^-16}]]}, 
                    InsetBox["\"MS\"", 
                    Offset[{0, -1}, {-2., 1.2246467991473532`*^-16}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"loss1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"MeanSquaredLossLayer", "[", "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["loss1", Bold], 
                    Style[
                    HoldForm[
                    MeanSquaredLossLayer[]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    Hue[0, 0.7, 0.9]], 
                    FaceForm[
                    RGBColor[
                    0.9333333333333333, 0.5133333333333334, 
                    0.5133333333333334]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-2., 1.0000000000000002`}], 
                    Offset[{10, 10}, {-2., 1.0000000000000002`}]]}, 
                    InsetBox["\"MA\"", 
                    Offset[{0, -1}, {-2., 1.0000000000000002`}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"loss2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"MeanAbsoluteLossLayer", "[", "]"}], HoldForm], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["loss2", Bold], 
                    Style[
                    HoldForm[
                    MeanAbsoluteLossLayer[]], FontFamily -> "Source Code Pro",
                     ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-3., -0.9999999999999998}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Target\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Target", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    EdgeForm[
                    GrayLevel[0.85]], 
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-1., 6.123233995736766*^-17}], 
                    Offset[{10, 10}, {-1., 6.123233995736766*^-17}]]}, 
                    InsetBox[
                    StyleBox[
                    "\"+\"", StripOnInput -> False, FontSize -> 14], {-1., 
                    6.123233995736766*^-17}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"plus\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ThreadingLayer", "[", 
                    RowBox[{"Plus", ",", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"Real\"", ",", "\"Real\""}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["plus", Bold], 
                    Style[
                    HoldForm[
                    ThreadingLayer[Plus, "Inputs" -> {"Real", "Real"}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Output\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Output", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-3., 1.0000000000000002`}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Target\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Target", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, FontSize -> 10]}, {
                    StyleBox[{
                    InsetBox["\"Input\"", 
                    Offset[{0, -7}, {-4., 2.4492935982947064`*^-16}], {0, 1.},
                     Automatic, {1, 0}], 
                    InsetBox["\"net\"", 
                    Offset[{0, -15}, {-3., 1.8369701987210297`*^-16}], {
                    0, 1.}, Automatic, {1, 0}], 
                    InsetBox["\"loss1\"", 
                    Offset[{0, -13}, {-2., 1.2246467991473532`*^-16}], {
                    0, 1.}, Automatic, {1, 0}], 
                    InsetBox["\"loss2\"", 
                    Offset[{0, -13}, {-2., 1.0000000000000002`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"Target\"", 
                    Offset[{0, -7}, {-3., -0.9999999999999998}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"plus\"", 
                    Offset[{0, -13}, {-1., 6.123233995736766*^-17}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox["\"Output\"", 
                    Offset[{0, -7}, {0., 0.}], {0, 1.}, Automatic, {1, 0}], 
                    InsetBox["\"Target\"", 
                    Offset[{0, -7}, {-3., 1.0000000000000002`}], {0, 1.}, 
                    Automatic, {1, 0}]}, StripOnInput -> False, FontColor -> 
                    GrayLevel[0.5]], 
                    StyleBox[{
                    InsetBox["\"\"", 
                    
                    Offset[{3.367778697655222*^-16, 5.5}, {-3.4, 
                    2.0818995585505003`*^-16}], {0., -0.17}, Automatic, {
                    1., -6.123233995736767*^-17}], 
                    InsetBox["\"\"", 
                    
                    Offset[{3.3677786976552205`*^-16, 
                    5.5}, {-2.4000000000000004`, 1.4695761589768238`*^-16}], {
                    0., -0.17}, Automatic, {1., -6.123233995736765*^-17}], 
                    InsetBox["\"\"", 
                    
                    Offset[{-3.889087296526011, 
                    3.889087296526011}, {-2.4000000000000004`, 
                    0.6000000000000002}], {0., -0.17}, Automatic, {
                    0.7071067811865475, 0.7071067811865475}], 
                    InsetBox["\"\"", 
                    
                    Offset[{-3.889087296526011, 
                    3.8890872965260117`}, {-2.4000000000000004`, \
-0.39999999999999986`}], {0., -0.17}, Automatic, {0.7071067811865476, 
                    0.7071067811865475}], 
                    InsetBox["\"\"", 
                    
                    Offset[{0., 5.5}, {-2.4000000000000004`, 
                    1.0000000000000002`}], {0., -0.17}, Automatic, {1., 0.}], 
                    
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    
                    Offset[{3.3677786976552215`*^-16, 5.5}, {-1.4, 
                    8.572527594031473*^-17}], {0., -0.17}, Automatic, {
                    1., -6.123233995736766*^-17}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    
                    Offset[{3.8890872965260117`, 3.889087296526011}, {-1.4, 
                    0.4000000000000002}], {0., -0.17}, Automatic, {
                    0.7071067811865475, -0.7071067811865476}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    
                    Offset[{3.3677786976552215`*^-16, 5.5}, {-0.4, 
                    2.4492935982947065`*^-17}], {0., -0.17}, Automatic, {
                    1., -6.123233995736766*^-17}]}, StripOnInput -> False, 
                    FontSize -> 8, FontWeight -> "Thin", FontColor -> 
                    GrayLevel[0.7]]}, {
                    EdgeForm[{
                    GrayLevel[0.5], 
                    Thickness[Large], 
                    Dashing[{0, Small}]}], 
                    FaceForm[None], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    
                    Part[{{-4., 2.4492935982947064`*^-16}, {-3., 
                    1.8369701987210297`*^-16}, {-2., 
                    1.2246467991473532`*^-16}, {-2., 
                    1.0000000000000002`}, {-3., -0.9999999999999998}, {-1., 
                    6.123233995736766*^-17}, {0., 0.}, {-3., 
                    1.0000000000000002`}}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 24, 20, 20, 8, 20, 8, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, AspectRatio -> Full, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    ImagePadding -> {{28., 28.}, {28., 18.}}, 
                    ImageSize -> {276., 156.}, PlotRangePadding -> 0], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`Private`NetGraph`vpathInfo[
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "net"], 
                    NeuralNetworks`NetPath["Nodes", "loss1"], 
                    NeuralNetworks`NetPath["Nodes", "loss2"], 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Nodes", "plus"], 
                    NeuralNetworks`NetPath["Outputs", "Output"]}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "Target" -> 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    Association[
                    "net" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{10, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association["OutputDimensions" -> {10}, "$OutputSize" -> 
                    10, "$InputSize" -> NeuralNetworks`SizeT, 
                    "$InputDimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {10}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{NeuralNetworks`SizeT, 10}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "Parameters" -> 
                    Association["OutputDimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    "$OutputSize" -> NeuralNetworks`SizeT, "$InputSize" -> 10,
                     "$InputDimensions" -> {10}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]], "loss1" -> 
                    Association[
                    "Type" -> "MeanSquaredLoss", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "$Dimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "Target" -> 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "loss2" -> 
                    Association[
                    "Type" -> "MeanAbsoluteLoss", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "$Dimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "Target" -> 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]]]], 
                    GridBox[{{
                    ItemBox[
                    StyleBox["Inputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox[
                    StyleBox["Outputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox["\"tensor\"", "SummaryItem"], "", "", 
                    StyleBox[
                    TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox["\"real\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{"\"Target\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox["\"tensor\"", "SummaryItem"], "", "", "", ""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]], 
                    ImageSizeCache -> {166., {19.6669921875, 24.8330078125}}, 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}, "RowsIndexed" -> {}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.739564154772109*^9, 3.7395642334687862`*^9, {3.739564272589508*^9, 
   3.739564296925922*^9}},
 CellLabel->
  "Out[262]=",ExpressionUUID->"a3078f17-deba-4da1-af96-722636904049"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dataAssoc", " ", "=", " ", 
  RowBox[{"<|", 
   RowBox[{
    RowBox[{"\"\<Input\>\"", "\[Rule]", 
     RowBox[{"data", "[", 
      RowBox[{"[", 
       RowBox[{";;", ",", "1"}], "]"}], "]"}]}], ",", 
    RowBox[{"\"\<Target\>\"", "\[Rule]", 
     RowBox[{"data", "[", 
      RowBox[{"[", 
       RowBox[{";;", ",", "2"}], "]"}], "]"}]}]}], "|>"}]}]], "Input",
 CellChangeTimes->{{3.739564364485478*^9, 3.739564426640192*^9}},
 CellLabel->
  "In[264]:=",ExpressionUUID->"008ad256-69b9-457f-8423-e79f9a197f62"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Input\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "3.`"}], ",", 
      RowBox[{"-", "2.8`"}], ",", 
      RowBox[{"-", "2.6`"}], ",", 
      RowBox[{"-", "2.4`"}], ",", 
      RowBox[{"-", "2.2`"}], ",", 
      RowBox[{"-", "2.`"}], ",", 
      RowBox[{"-", "1.7999999999999998`"}], ",", 
      RowBox[{"-", "1.5999999999999999`"}], ",", 
      RowBox[{"-", "1.4`"}], ",", 
      RowBox[{"-", "1.2`"}], ",", 
      RowBox[{"-", "1.`"}], ",", 
      RowBox[{"-", "0.7999999999999998`"}], ",", 
      RowBox[{"-", "0.5999999999999996`"}], ",", 
      RowBox[{"-", "0.3999999999999999`"}], ",", 
      RowBox[{"-", "0.19999999999999973`"}], ",", "0.`", ",", 
      "0.20000000000000018`", ",", "0.40000000000000036`", ",", 
      "0.6000000000000001`", ",", "0.8000000000000003`", ",", "1.`", ",", 
      "1.2000000000000002`", ",", "1.4000000000000004`", ",", 
      "1.6000000000000005`", ",", "1.8000000000000007`", ",", "2.`", ",", 
      "2.2`", ",", "2.4000000000000004`", ",", "2.6000000000000005`", ",", 
      "2.8000000000000007`", ",", "3.`"}], "}"}]}], ",", 
   RowBox[{"\<\"Target\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0.26903239331306195`", ",", 
      RowBox[{"-", "0.12819363985458554`"}], ",", 
      RowBox[{"-", "0.23613188457946968`"}], ",", "0.23271332994464916`", ",",
       "0.3285879188561729`", ",", 
      RowBox[{"-", "0.09686830871683157`"}], ",", 
      RowBox[{"-", "0.20845147730556915`"}], ",", "0.32715986099250405`", ",",
       "0.0028575155685034714`", ",", "0.21628998713549252`", ",", 
      "0.5408049967246119`", ",", "0.46742076729017606`", ",", 
      "0.8484546131871542`", ",", "1.1531806837661307`", ",", 
      "0.980557534450039`", ",", "0.961543658980738`", ",", 
      "0.8998000657176113`", ",", "0.6865955858882864`", ",", 
      "0.7386135664810012`", ",", "0.4513082001217387`", ",", 
      "0.27607795960837433`", ",", "0.3611170080917023`", ",", 
      "0.07889341208465492`", ",", 
      RowBox[{"-", "0.004293428907130456`"}], ",", 
      RowBox[{"-", "0.18037179995584157`"}], ",", "0.07060323249348381`", ",",
       "0.11703597412491516`", ",", "0.09816497140113585`", ",", 
      "0.23438252634151782`", ",", 
      RowBox[{"-", "0.030803833412983424`"}], ",", "0.10951448124546687`"}], 
     "}"}]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.739564365809841*^9, 3.7395644270399427`*^9},
 CellLabel->
  "Out[264]=",ExpressionUUID->"b4ab2911-86b9-417d-bc70-fc107e21f7ae"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net3T", " ", "=", " ", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"trainNet", ",", "dataAssoc", ",", 
    RowBox[{"LossFunction", "\[Rule]", "\"\<Output\>\""}]}], "]"}]}]], "Input",\

 CellChangeTimes->{{3.7395644579614477`*^9, 3.739564507918231*^9}},
 CellLabel->
  "In[267]:=",ExpressionUUID->"a3e1bfac-f4e2-4d46-bc34-77a9df141434"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.0149], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.03], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                  18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                  49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                  18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                 FaceForm[
                  RGBColor[0.631, 0.8160000000000001, 0.498]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15., 
                  33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                  22., 40.}}}]}, {
                 FaceForm[
                  RGBColor[0.38, 0.753, 0.89]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                 FaceForm[
                  RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15., 
                  12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                  22., 19.}}}]}, {
                 FaceForm[
                  RGBColor[0.584, 0.51, 0.8390000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5, 
                  30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                 FaceForm[
                  RGBColor[0.4, 0.396, 0.659]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30., 
                  23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                  37., 30.}}}]}, {
                 FaceForm[
                  RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5, 
                  40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.647, 0.259, 0.08600000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45., 
                  33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                  52., 40.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  
                  TemplateBox[{"\"Number of inputs\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["2", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["4", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.0149], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.03], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                  18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                  49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                 
                 JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                  18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                 FaceForm[
                  RGBColor[0.631, 0.8160000000000001, 0.498]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.40800000000000003`, 0.627, 0.196]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {15., 
                  33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 40.}, {
                  22., 40.}}}]}, {
                 FaceForm[
                  RGBColor[0.38, 0.753, 0.89]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 12.5}}}]}, {
                 FaceForm[
                  RGBColor[0.24300000000000002`, 0.608, 0.71]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {15., 
                  12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 19.}, {
                  22., 19.}}}]}, {
                 FaceForm[
                  RGBColor[0.584, 0.51, 0.8390000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{30.5, 
                  30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 23.5}}}]}, {
                 FaceForm[
                  RGBColor[0.4, 0.396, 0.659]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {30., 
                  23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 30.}, {
                  37., 30.}}}]}, {
                 FaceForm[
                  RGBColor[0.8270000000000001, 0.41200000000000003`, 0.133]], 
                 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{45.5, 
                  40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 33.5}}}]}, {
                 FaceForm[
                  RGBColor[0.647, 0.259, 0.08600000000000001]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {45., 
                  33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 40.}, {
                  52., 40.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = None}, 
                  GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    GrayLevel[0.7], {
                    
                    LineBox[{{-4., 2.4492935982947064`*^-16}, {-3., 
                    1.8369701987210297`*^-16}}], 
                    
                    LineBox[{{-3., 1.8369701987210297`*^-16}, {-2., 
                    1.2246467991473532`*^-16}}], 
                    
                    LineBox[{{-3., 1.8369701987210297`*^-16}, {-2., 
                    1.0000000000000002`}}], 
                    
                    LineBox[{{-3., -0.9999999999999998}, {-2., 
                    1.2246467991473532`*^-16}}], 
                    
                    LineBox[{{-3., 1.0000000000000002`}, {-2., 
                    1.0000000000000002`}}], 
                    
                    LineBox[{{-2., 1.2246467991473532`*^-16}, {-1., 
                    6.123233995736766*^-17}}], 
                    
                    LineBox[{{-2., 1.0000000000000002`}, {-1., 
                    6.123233995736766*^-17}}], 
                    LineBox[{{-1., 6.123233995736766*^-17}, {0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-3.4, 
                    2.0818995585505003`*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736767*^-17}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-2.4000000000000004`, 
                    1.4695761589768238`*^-16}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736765*^-17}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-2.4000000000000004`, 
                    0.6000000000000002}, {-0.25, 0}, 
                    Offset[8], {1., 1.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-2.4000000000000004`, -0.39999999999999986`}, \
{-0.25, 0}, 
                    Offset[8], {1., 0.9999999999999999}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> 
                    False]], {-2.4000000000000004`, 
                    1.0000000000000002`}, {-0.25, 0}, 
                    Offset[8], {1., 0.}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-1.4, 
                    8.572527594031473*^-17}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736766*^-17}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-1.4, 
                    0.4000000000000002}, {-0.25, 0}, 
                    Offset[8], {1., -1.0000000000000002`}], 
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-0.4, 
                    2.4492935982947065`*^-17}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736766*^-17}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-4., 2.4492935982947064`*^-16}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Input", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-12, -12}, {-3., 1.8369701987210297`*^-16}], 
                    Offset[{12, 12}, {-3., 1.8369701987210297`*^-16}]]}, 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{"Miter", 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, PlotRange -> All, AspectRatio -> 
                    0.7, PlotRangePadding -> 1, ImagePadding -> 0, ImageSize -> 
                    16, ImageMargins -> 0.], {-3., 
                    1.8369701987210297`*^-16}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"net\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"NetChain", "[", 
                    RowBox[{"\[LeftSkeleton]", "3", "\[RightSkeleton]"}], 
                    "]"}], HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["net", Bold], 
                    Style[
                    HoldForm[
                    NetChain[
                    Skeleton[3]]], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9333333333333333, 0.5133333333333334, 
                    0.5133333333333334]], 
                    EdgeForm[
                    Hue[0, 0.7, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-2., 1.2246467991473532`*^-16}], 
                    Offset[{10, 10}, {-2., 1.2246467991473532`*^-16}]]}, 
                    InsetBox[
                    FormBox["\"MS\"", TraditionalForm], 
                    Offset[{0, -1}, {-2., 1.2246467991473532`*^-16}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"loss1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"MeanSquaredLossLayer", "[", 
                    RowBox[{
                    RowBox[{"\"Input\"", "\[Rule]", "\"Real\""}], ",", 
                    RowBox[{"\"Target\"", "\[Rule]", "\"Real\""}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["loss1", Bold], 
                    Style[
                    HoldForm[
                    MeanSquaredLossLayer[
                    "Input" -> "Real", "Target" -> "Real"]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[
                    0.9333333333333333, 0.5133333333333334, 
                    0.5133333333333334]], 
                    EdgeForm[
                    Hue[0, 0.7, 0.9]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-2., 1.0000000000000002`}], 
                    Offset[{10, 10}, {-2., 1.0000000000000002`}]]}, 
                    InsetBox[
                    FormBox["\"MA\"", TraditionalForm], 
                    Offset[{0, -1}, {-2., 1.0000000000000002`}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"loss2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"MeanAbsoluteLossLayer", "[", 
                    RowBox[{
                    RowBox[{"\"Input\"", "\[Rule]", "\"Real\""}], ",", 
                    RowBox[{"\"Target\"", "\[Rule]", "\"Real\""}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["loss2", Bold], 
                    Style[
                    HoldForm[
                    MeanAbsoluteLossLayer[
                    "Input" -> "Real", "Target" -> "Real"]], FontFamily -> 
                    "Source Code Pro", ShowStringCharacters -> True]}], 
                    "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-3., -0.9999999999999998}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Target\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Target", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{{
                    FaceForm[
                    RGBColor[0.9, 0.9, 0.9]], 
                    EdgeForm[
                    GrayLevel[0.85]], 
                    RectangleBox[
                    Offset[{-10, -10}, {-1., 6.123233995736766*^-17}], 
                    Offset[{10, 10}, {-1., 6.123233995736766*^-17}]]}, 
                    InsetBox[
                    BoxData[
                    FormBox[
                    StyleBox["\"+\"", 14, StripOnInput -> False], 
                    TraditionalForm]], {-1., 6.123233995736766*^-17}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"plus\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    TagBox[
                    RowBox[{"ThreadingLayer", "[", 
                    RowBox[{"Plus", ",", 
                    RowBox[{"\"Inputs\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"Real\"", ",", "\"Real\""}], "}"}]}]}], "]"}], 
                    HoldForm], FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["plus", Bold], 
                    Style[
                    HoldForm[
                    ThreadingLayer[Plus, "Inputs" -> {"Real", "Real"}]], 
                    FontFamily -> "Source Code Pro", ShowStringCharacters -> 
                    True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Output\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Output", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-3., 1.0000000000000002`}, 
                    Offset[{2, 2}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Target\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]], Annotation[#, 
                    Column[{
                    Style["Target", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}, {
                    StyleBox[{{
                    InsetBox[
                    FormBox["\"Input\"", TraditionalForm], 
                    Offset[{0, -7}, {-4., 2.4492935982947064`*^-16}], {0, 1.},
                     Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"net\"", TraditionalForm], 
                    Offset[{0, -15}, {-3., 1.8369701987210297`*^-16}], {
                    0, 1.}, Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"loss1\"", TraditionalForm], 
                    Offset[{0, -13}, {-2., 1.2246467991473532`*^-16}], {
                    0, 1.}, Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"loss2\"", TraditionalForm], 
                    Offset[{0, -13}, {-2., 1.0000000000000002`}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Target\"", TraditionalForm], 
                    Offset[{0, -7}, {-3., -0.9999999999999998}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"plus\"", TraditionalForm], 
                    Offset[{0, -13}, {-1., 6.123233995736766*^-17}], {0, 1.}, 
                    Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Output\"", TraditionalForm], 
                    Offset[{0, -7}, {0., 0.}], {0, 1.}, Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Target\"", TraditionalForm], 
                    Offset[{0, -7}, {-3., 1.0000000000000002`}], {0, 1.}, 
                    Automatic, {1, 0}]}}, FontColor -> GrayLevel[0.5], 
                    StripOnInput -> False], 
                    StyleBox[{
                    InsetBox[
                    FormBox["\"\[DoubleStruckCapitalR]\"", TraditionalForm], 
                    
                    Offset[{3.367778697655222*^-16, 5.5}, {-3.4, 
                    2.0818995585505003`*^-16}], {0., -0.17}, Automatic, {
                    1., -6.123233995736767*^-17}], 
                    InsetBox[
                    FormBox["\"\[DoubleStruckCapitalR]\"", TraditionalForm], 
                    
                    Offset[{3.3677786976552205`*^-16, 
                    5.5}, {-2.4000000000000004`, 1.4695761589768238`*^-16}], {
                    0., -0.17}, Automatic, {1., -6.123233995736765*^-17}], 
                    InsetBox[
                    FormBox["\"\[DoubleStruckCapitalR]\"", TraditionalForm], 
                    
                    Offset[{-3.889087296526011, 
                    3.889087296526011}, {-2.4000000000000004`, 
                    0.6000000000000002}], {0., -0.17}, Automatic, {
                    0.7071067811865475, 0.7071067811865475}], 
                    InsetBox[
                    FormBox["\"\[DoubleStruckCapitalR]\"", TraditionalForm], 
                    
                    Offset[{-3.889087296526011, 
                    3.8890872965260117`}, {-2.4000000000000004`, \
-0.39999999999999986`}], {0., -0.17}, Automatic, {0.7071067811865476, 
                    0.7071067811865475}], 
                    InsetBox[
                    FormBox["\"\[DoubleStruckCapitalR]\"", TraditionalForm], 
                    
                    Offset[{0., 5.5}, {-2.4000000000000004`, 
                    1.0000000000000002`}], {0., -0.17}, Automatic, {1., 0.}], 
                    
                    InsetBox[
                    FormBox["\"\[DoubleStruckCapitalR]\"", TraditionalForm], 
                    Offset[{3.3677786976552215`*^-16, 5.5}, {-1.4, 
                    8.572527594031473*^-17}], {0., -0.17}, Automatic, {
                    1., -6.123233995736766*^-17}], 
                    InsetBox[
                    FormBox["\"\[DoubleStruckCapitalR]\"", TraditionalForm], 
                    
                    Offset[{3.8890872965260117`, 3.889087296526011}, {-1.4, 
                    0.4000000000000002}], {0., -0.17}, Automatic, {
                    0.7071067811865475, -0.7071067811865476}], 
                    InsetBox[
                    FormBox["\"\[DoubleStruckCapitalR]\"", TraditionalForm], 
                    
                    Offset[{3.3677786976552215`*^-16, 5.5}, {-0.4, 
                    2.4492935982947065`*^-17}], {0., -0.17}, Automatic, {
                    1., -6.123233995736766*^-17}]}, FontColor -> 
                    GrayLevel[0.7], FontSize -> 8, FontWeight -> "Thin", 
                    StripOnInput -> False]}, {
                    FaceForm[None], 
                    EdgeForm[{
                    Dashing[{0, Small}], 
                    GrayLevel[0.5], 
                    Thickness[Large]}], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    
                    Part[{{-4., 2.4492935982947064`*^-16}, {-3., 
                    1.8369701987210297`*^-16}, {-2., 
                    1.2246467991473532`*^-16}, {-2., 
                    1.0000000000000002`}, {-3., -0.9999999999999998}, {-1., 
                    6.123233995736766*^-17}, {0., 0.}, {-3., 
                    1.0000000000000002`}}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 24, 20, 20, 8, 20, 8, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, ImageSize -> {276., 156.}, AspectRatio -> 
                    Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{28., 28.}, {28., 18.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`Private`NetGraph`vpathInfo[
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "net"], 
                    NeuralNetworks`NetPath["Nodes", "loss1"], 
                    NeuralNetworks`NetPath["Nodes", "loss2"], 
                    NeuralNetworks`NetPath["Inputs", "Target"], 
                    NeuralNetworks`NetPath["Nodes", "plus"], 
                    NeuralNetworks`NetPath["Outputs", "Output"]}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "Target" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    Association[
                    "net" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{10, 1}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{10}]], "Parameters" -> 
                    Association["OutputDimensions" -> {10}, "$OutputSize" -> 
                    10, "$InputSize" -> 1, "$InputDimensions" -> {}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[Tanh], 
                    "$Dimensions" -> {10}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{1, 10}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{1}]], "Parameters" -> 
                    Association["OutputDimensions" -> {}, "$OutputSize" -> 1, 
                    "$InputSize" -> 10, "$InputDimensions" -> {10}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "3", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "loss1" -> 
                    Association[
                    "Type" -> "MeanSquaredLoss", "Arrays" -> Association[], 
                    "Parameters" -> Association["$Dimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT], "Target" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "loss2" -> 
                    Association[
                    "Type" -> "MeanAbsoluteLoss", "Arrays" -> Association[], 
                    "Parameters" -> Association["$Dimensions" -> {}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT], "Target" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "plus" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Plus]], 
                    "Inputs" -> 
                    Association[
                    "1" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "2" -> NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]]]], 
                    GridBox[{{
                    ItemBox[
                    StyleBox["Inputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox[
                    StyleBox["Outputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox["\"real\"", "SummaryItem"], "", "", 
                    StyleBox[
                    TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox["\"real\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{"\"Target\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox["\"real\"", "SummaryItem"], "", "", "", ""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.73956446576122*^9, 3.739564512579645*^9}},
 CellLabel->
  "Out[267]=",ExpressionUUID->"63318ed6-2063-4a46-a3ac-4b7fbc42c8fd"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"net2T", "[", "x", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"-", "3"}], ",", "3"}], "}"}]}], "]"}], ",", "plot", ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.739564511374175*^9, 3.739564522188877*^9}},
 CellLabel->
  "In[271]:=",ExpressionUUID->"c0105fef-bd38-4aa7-b70b-0cfc9a594c28"],

Cell[BoxData[
 GraphicsBox[{{{{}, {}, 
     TagBox[
      {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], 
       Opacity[1.], LineBox[CompressedData["
1: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
zN9XzNyfVbl2lj0imH9qCY0M0vgXrLPAnHzG6xZc87Z3BfOsS2mkfNfmlosW
WDzuOY0ma8ZwBgcw5EcyblI5cXD8RTBXrYw5rxmaLvJSYFECY1epwYB5fvkw
j9ILGun14+R/poG53ozlvvoWaN/Og37tjMVNhm93zQGLOOU0Si9X6jePywUH
Mv4394vsKXUwq56xfnraonP3n4FlKpjz4rvqeq0Cs7UZt93cbBHyNAd8jPHD
qxPO8RGYdZmxp2tNUHrJU4jfZGxwMjIldxdYFMFYxdyqqLz2CZxfGONu/SXv
m0yJ/RnnbuobaHv/GM7DhbG/Zt70/mNgsRFjM7a3hlRHNuxvMeOFcvv0ZjiB
Of3M/H1Ss4+oDDyC/GzGhf1it2X/grkOjG9+Tbm5UZLE5zDmNjun7vR9COsx
c16aFRtLTGXBYjPGv3PHfTwRKoR4O3P+5ekvf55VAvPtGUfww+Q8+Vmw/2/M
52cdYrk0eCGYe5Cx1Ln/LNNWPoDzUGE+/9qTORdynmSS72/mfsSaX71Vthks
fsbcJzd3jcAXt9PhvJYXMe+jbrohQ3Af8rnM/Vto9Vgl7HEa9Pdm7ufrnXoP
rJrvQf1s5j6n5U0e2tGRAvmYue9eK2p1/xmmiJnnYZXikVfDfydDv/hnzP0L
mD/38zIB7M87h2b+Pug8UbY5CfbDfcqcV7vbYCjz74Sx+oPZzPPnqLbGYkcs
rBc+oFGAaWbpIts7sN9dmTTahLTN+q9HQ7/mdBpFyZp6BFaHw7zNqTQyue9f
IDIJhno2STSqSVP+eGC/CdR7EUajcUd3sX23bEZj9SpDmfejZrzb1ByrMfNL
Qmj0vtkmI27v+TGLY5j3lVvGnl3fZ1+H+PtrzPMQhSJnXIoZMzudeV/ezsqa
sNXiLuSrONHobKvcxk1z+WBfexoVj1xLcRyOg36cU8znp2nn3fA4acysbcz7
+V6QFidx+f0xizK3MvMVx+ZOWJ0O6410aWT5U3r96XUZ0K9rM3NfMztmK8Zm
wjwSWjTarPh0hjgpC+o9Wsw8zx3GUg7C7DHzdk2h0fmAoDa/qnzozwrqQUnq
RYkbDTDU67nWg+oKBqy6asH8yn97kMJwuiNlK4J8I9se5PSPwvcpDgUwT6he
D1oQ0dJS51IE8d/93SjQ5koD1/M5xKft6Ua+FRKPWvLBIpFuN/Jc5nnr1DCY
d0KL+X7+z9PAyaUM5vVX60bcC17ll61fQL7ury60ws8n/65+BdTzie9Cr6gA
wTu5augn0fUdyfTt3phmWA8WW3cisUvp6nNeb8fMGar6irqf7il0K/sE+9m3
sQUJfOK4x/1awa7Kn9CCgVT589HfoN/Hne/QhyyVvI2nusArQxrRSy1nDVU3
4q1XGlFufnH4RG/i406NKLrcxvl1AnHx3kZk9lmo7vgRzJKb2ohqZ+wIiTfp
hn4Nvg2o2Mnp5KStPTCf2P81Mg4X+3YG07DeL6MeBW4XykhEgsUL+PWobPBa
iEIcmFsVXI82mC2J0XkA5us61yNlxXMZ4bUk/mRNPWqPmtKwRe4/cHV+HXK/
u1Yt5haxTXMtupt0I293WC/0W6tZg1wW7Y5vvAPmHFStQTtTp/hYJZG4t0IN
6sv0Nzj/sJfcj5FqtCvX90tCHZjvxq9GP+u8Jg3L/gD7t1chQ9ZF4xQfMPuw
10s07pB91/gLfRC/9rUcVXFTkvd7DYCXfCtBj2SUDg/a/YR+mh0FaGHUvPYJ
u4fg/Cb35aKhc14jqUa/If9vo2zUOTRHltIahfMZwJmIf9Ln1Rw1FmdsvZu7
AAXrVN5QXCAxZu5MuUgk65iqWzRLcsw8A7PLKF/vSV62khQHvj82XMUj9pZr
TWTHQf6CTxFYYkJd5JIRsMjiYgJeu8O5UJ8lPWbOuqx7eOhdWvusXjDrjVcm
1rMrC94zQBwdkokDhr9oXRsi+Qf5mZitNMevT3ICuPpZJt5u6re4Xh7MDurN
xKG1J2yD14BFNpYPsGap8vfJF0h+/NosfN54Q6juRTDv15YsXNBivMn9Cli8
2zALH5AKuPHNj+S3n87CHpzhpWVRpN4f5nuiLKfR/louWX99shDL6f+YlSci
+Q/+EmKLZtn8vmIwv2a+EPcMbpU9/pLMJ42EWGHNw3TdDyS+66wQc4urTdw/
k/UHeEKcYtQ5+qANzDUPEOJNzqr75vUQH04WYm+JzYNmP8CsQw+FuCbYPDZ4
kKw3LhBiJbbr9rJhMu/OKiH+///nwXrtt0L8P+oM93Q=
        "]]},
      Annotation[#, 
       "Charting`Private`Tag$1927729#1"]& ]}, {}, {}}, {{}, {{}, 
     {RGBColor[1, 0, 0], PointSize[0.012833333333333334`], AbsoluteThickness[
      1.6], PointBox[CompressedData["
1:eJxTTMoPSmViYGCQB2IQDQEcB7rYty25bH7RPg0M2A7caI01XJZxYP/ZMyDA
cuDok+cXJlqe228MBswHVvntetZz8qz9rJkgwHiAxzVs/lT2q/ZQAw+cVfva
GXNmx36w9jN/9pe6v9rVue7UfrDymT/3L9r68KX+hytQ+77td7jt/HdJRro9
xPzP+3PqZ75KXn8aat6H/YFO59zd/B7azwDrf7n/4kO70xav7tobgNU/3n/n
3Q/PLrXXUPmb+xdUbJqWW/zJfgKYf3L/g6cnDXclvIe5j8Hts7zp9yPv7BdA
5O3fOD9r1Dz9Bsq/aS/yO85v+o+n9iYQ8+3PxPG+3rHouf0ciP328xX+nLR+
dAfmPnu11lePnVZfhKr/bJ+t8KmpS+a6fQbEf/Z5DMcuRBttger/aV+w7Vn3
n6mF+y9Awsf+nNb3oByx4/uhznNI1uhdxyu8CRa+Dvn5QRcFv+2Fms/s8PbG
8bdhijvtz0Hix2En4yYle4ZzUPvYHPbPTHPh6p4PNY/DIcY+WVqFc489ADYo
7zo=
       "]]}, {}}, {}, {}, {}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->All,
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.739564514608796*^9, 3.739564522786345*^9}, 
   3.739564617289672*^9},
 CellLabel->
  "Out[271]=",ExpressionUUID->"3a9873a7-fcd0-4cbe-a94f-6161270da43d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"data1", "=", 
   RowBox[{"N", "@", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"t", "^", ".5"}], 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Sin", "[", "t", "]"}], ",", 
          RowBox[{"Cos", "[", "t", "]"}]}], "}"}]}], "+", 
       RowBox[{"RandomReal", "[", 
        RowBox[{".3", ",", "2"}], "]"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"t", ",", ".01", ",", 
        RowBox[{"2", "Pi"}], ",", ".01"}], "}"}]}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"data2", "=", 
   RowBox[{"N", "@", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"t", "^", ".5"}], 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Sin", "[", 
           RowBox[{"t", "+", "Pi"}], "]"}], ",", 
          RowBox[{"Cos", "[", 
           RowBox[{"t", "+", "Pi"}], "]"}]}], "}"}]}], "+", 
       RowBox[{"RandomReal", "[", 
        RowBox[{".3", ",", "2"}], "]"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"t", ",", ".01", ",", 
        RowBox[{"2", "Pi"}], ",", ".01"}], "}"}]}], "]"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{
    RowBox[{"Thread", "[", 
     RowBox[{"data1", "\[Rule]", "1"}], "]"}], "~", "Join", "~", 
    RowBox[{"Thread", "[", 
     RowBox[{"data2", "\[Rule]", "2"}], "]"}]}]}], ";"}], "\n", 
 RowBox[{"ListPlot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"data1", ",", "data2"}], "}"}], ",", 
   RowBox[{"AspectRatio", "\[Rule]", "Automatic"}]}], "]"}]}], "Input",
 CellLabel->
  "In[272]:=",ExpressionUUID->"351edee4-27ca-4b26-846f-ccfdb7f116be"],

Cell[BoxData[
 GraphicsBox[{{}, {{}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.004583333333333334], 
     AbsoluteThickness[1.6], PointBox[CompressedData["
1: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
kiJ9j/EgHryzuKo9hI3WDwo+FN3pQ1Vp3wPP+tj4IULMtmupC9uv2ByWPsDG
tsCHf10O9KFKIn/8SCAXJewu/Ou4NIjp/Fl+BZ+4qNuU8ZdqNYDrgxv+W+Ly
8Hd8NHspaASrCGYOUdc4aOJbLOeoPIRxpOFK8w8c/Op699CA8yBan9P9cbeR
jWuvV+7Uf96PYhsS/l42mcMMroAakMZQKdj05p0/TLzNzNShTo7g+IiSUqMJ
F4cjzH025g7jlg9l+teEOZgfu13BVGsEj1reOG91go19qcu+pcyQsf7DoZMG
0UwM1Gcw3ZPJ+N+EvWXlJi7aRNwP9FOcxFYpt+aL+7iob6XurOA+huqXSrhT
h7iooZUjknCcjGxza+YgcPCV+X2zSuMp9KZ6LQWMsLHJUbX1k8sURvWappgP
MDCqhxCjeoOMz/Yrvlf6j4men2NrDruNYXzKiZrrQQxUag156lVAwSGf1bny
Hmysnz4yVb2MgruJ2acUQxn4V+neCavNFJSJ3FWlf4OJMt+e8uc1T2DctIFB
0BAdM4+mEsVjpvD7jw830rgsdO3JeEQ1p6LtsNuOgSdsPKa4rC1maRZzv54Y
sj3CwueaKmb3jlIwYvc3kn0IHS8c3enLWDaLXoP8khVuDDyWE3lM4TENw0ev
2uXy/re/51YH6J2bQR1LQptINA0rpuL4FldTMN+BxfeJRsPlLuvtyTMUXN6y
RUgvmo6P4qSdH3pTcd9kifT7DhrGalw8nrKOir0BshzlcAaeS2hTcZmmY0/0
Pm5JMg2FY349a26jomvYmtz3G+mo35vHni6l42m199c0jKkIuXma9kwGZsrE
/tD5TsUh+7niw+o8XMTNOiQeUfGF60aZik00PN5VkNk0SUPtI/qfRPNpeMNN
Vt45mI5Kf+J98rcxcFuKj77OChpqsEulDUt4fWNUsT98MwODg/SvKryio8T8
cO0ZJRqGHfPs+b2HhqsFS/lIt2exMTfpeTSPp+4THjprenj1Leq1Z+sycHfC
yZa1NB4vjTkHtvfT8deFZ3np/2bQoEK167sWT0dcdd247+UMcomXfP9Us/GT
q/y9hcszKMYpUzLk6RBaR/pNihpPL3GeUr2nGCgR7HXVy46KCf/ue0jEcHBZ
+hhhYz8FN3wnhNfp8PbI8j39eYRZzKd8Vb73lY17WCORMz+pSIsWDlPR4uJ9
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
/h83swpU
      "]]}, 
    {RGBColor[0.880722, 0.611041, 0.142051], PointSize[0.004583333333333334], 
     AbsoluteThickness[1.6], PointBox[CompressedData["
1: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
xsZqLL5wc/XySg50P7G/LSFfj7GmrzR7eftxOe24vZDZiBPX+78NxrChKUz4
jAijDtt6vFr30+dheMZ6bYp4ET6Y2PDE7/c8bBiMGZI8XoOfDs6zncY54NnU
/NnW5i86/9oQ8fnfAqS3exteN01Hms+rqIgkDvhST7Muvb0G0uWH/xsO48IJ
2RMOhe+qUeefIDvjLhvk5zCxYvwrhquwlhpt5IKQiv1thS9xMMiQ+eySyIEo
UPDzr8pHg7152SFMDuzJcg9TrozGu3059+P4uZDlTHfRYKbhqcLOzAv9bKCE
UDV1qv3Rv+H0kZwqFhBVy7SeFUVg+rdNVTPv2PBM6VHYr8/FoOa6yyj0Bm99
uu7rM2nPwEz189oWXw4s+yJ071uZDxT8GXom2cGFP9qVFLGwn7DmZmfTpk0c
sHvnGeW0+hvYL5VRermcRGicozg/0qNAQkHENeV9JML+5FbW62floP/LydlO
mg0Hgo+4+c+UQbKNebCuHIm4v6a0tsm2EPLS44QYPRz4pbnKKKavCNbuWbLZ
x48D6nzOdKrzO3CtK9ltk8uC3NGzY+8E62Gqq19ZsZMFooKVh+DzP1ik2O0+
msYFwrs04rlvJYRxOr6GZXFA6JrnYc33FeC7XUU7s40DNvmnGftf/AGa7da0
cHEScYHdsPyEUDPkB6d4CBBsmLoUwKxi1kGkZpzR5nVs0DqxZU+/3C/Ymv24
UUydC3w/M1JJDW1QwEk6Wr+fC72bdZ7tcWkGUZezh3d0sKGtTPHUqG8L/Pxj
r5ShQSIOR1re6xPqhsclD5ekWpKIqNT4zF+b/kGz33mRliQuDBZoxfVSakF3
i/Nt1RAu+DxNs7PS6ILAN67PDmaQiNBNC6Ulezpgr911IeocC/bFCozUsBrA
ZLeWYLEtF1pcpk2dQ1ogKntnOv0biajTWu3ra9YGGw0Cdnkt4oDh4jtGxNo2
0J26tSLYmg2yK6ULA0taoXn/VkVYSyIKh/+EpmzvgbsjaXVft5GIL4HDQ1Xh
7bD+VPTha3xcSN52x3LHfx2ws7CkefQ9F6ojl4m4ygyC3g5vQ1IAF5Z5q0vJ
Lx+A+qnn1J9RXEhgNLKbFLqhNJ412+7O5c0/WmKOwX3wgh4vf/0zF0ofBeqf
XToEW4/vW2HdzIU7MX20BLdBCMnSzMoR40De6rkDJwNH4eJzq1aRfi4kBg0+
WJ8wApFlXqe6vXj1lpcUU/k6BKNRk89sePWT9dMVbLs1DL8OtW1Qd2PDgxyL
LU4C48AgdWRK0zng1+f/MkRnAHSzj73vfMiBK1pBh8ZTJsB1YsPpbXJsyIZe
w/frxqDQNtkj6ywLJDPc/9GjaGB1U9JnFZULjlW9t8Y/DYPoRuU7f7V5+0tK
umRH4nGMo/YvJs+fpmyzZrevmICu4KWZ6m/Y4KcJCiRxGnjoxj2Ju8cGs5Dq
1Q2DdHDbuWjeIJANAUUVrD7VUYg573Pc0ZoDrJrQIgXDMfjIkBuX5fn9HSf7
oTI6DZirCpou3uJAi8HHQmXTSfi3PszF/78F2ON6XEU7aBzurVrfPnqCBbbc
xPjLuQyoMpF6EiLEhVOs39kKwpMQ9DZo4GEUB5jHrMqeB0zAVQc/zVKeHpZS
LqvFlwHzmxsKOm9wYJfgl/PL0umwKMI34PAHFpweO6zEr8/r+7uaTB7NLsDl
b7q7b9yegi8rLAJlu+dhxUHPgKPxU9AVv0SfHToPLR+j2JS6Sbi/bPX1YBYb
Fn1jXLvRNQ3irfN6L67y/KZery3zBAMMD0+usvg2B05FDyoPlU6C2pBZhh6v
P7GrV9R7nJ6GQg316r4PC+C71vGWU8oM9C06u64pkwXy6omW82pT0B/jiFHO
c6BhQ7U7lzgJD4eW/UqjzgFLYT51g800DPhv1vilwIKMHXlOC5tnQFz7OnSb
z4Pw6wslMtJMGL5Xtexc9QJ0vZZK2aw4DdvKvlpKHJkH09YX+ibps+A67+Aj
snMOCrclKQgpT0OE22bB94Fz8HDSQU9wdBYU3AWO1cjxeOBX9UYToxl4eWpx
eKfdAqgVLVCPb5sBg/Bwx6dC87Bkt2LTt9uzoG80/e41PxP8TnIFmt/OQB2/
dLhtDhOetM9FxPybgawtl7U5EbOQfrbpZs3nWegq2cTeYzgHh06Euf77MQc6
K4+sil46B0XRKhcebJyDmrqcLnMRJliu/2vylsIEUamOT1XlTMjeuXd7Uucc
UBtz6TX75kD9+tF+TR5ncMzWmrJkZkH44ho9J9YCZJCrkizVmUBfPPFIVGQO
ahsrhGZhFj5YZfwR8p+D9M910VbVTOjbe6pZLYwF9N1bTAVFp2FxzJKcB58X
YJkwmfwgcRqaMsI3G+ewoE6SuuKyyQwM/XjuyahbgIlu38MWWjNQ5az1n84u
FjBbVH9mVcwAZffjkL0vFiB3G7XYqWwa/nLSCjkkNjDOm4gm75qGtY6GKmdj
eH05UM/ykvgsnM8TkKDwuOFUPNnC3WwKapeZrbQ258A94d5jDTw+1N60bDol
mQ0lHvYPLEkMEPKKLAmf4gJH7P5a5sAk+BV8FzAik4jExt1Wui4M6PikYhOq
y4UyPxiTDJoG3YQDzbLTHKiM0RRjZdAhNr6mcdaeDaQbB3TOxdFg3NBWTOgQ
iahdnxD2yGkKnp/caWcozIbFajfwdSYdDOWX/fPiJxHkx42EbsEkqFccdmAt
4/XRuWfOVVcnQbTeqmvvdhKRIFRhXr1uEuqCxxcGx0hE/oFd23VE6bBhr2w+
04dEHJMMVYwKZ0BxX4xt/DwbJFrqBz3Jk6Aa/lQzvYEDEsUx1x7tnIAPb2t9
d4mQiOcKjxXPBDFgX7NH/bQpF77Y7cj5ZUgH10D644UYEnFW0Tepbf8ofMsK
qo3K5sDFFwLeP3zHoWyPWd/tLWTiSgNXcbPsKPzZR74lGk0mmtTPPHlIHgX6
Pr0UL2MyYS+xZsPuTcPwRmTDoKs5mSgJ+pK8J2ocfrSsjneJIxPZFzz2EbUj
IO4ktiAZw4Upqs7z8O/9sJWaWzjYSSZeG5nwad8YgPfktx8vPCMR/ZmfloZO
DIPKaV0tjSskYjjB82f7qlE4seCTpiBBJpg5F9hV0r0w7b1T8KApiQjnhte5
rx+CLcRlm2fvyYSJ3Deu0vpR0PmtcHQPkgg/mvrSt5QhkAzWTBx5QSbChbSv
l7OH4Zv6sbGmPBLR5JTGVPTphbDRuPcHLpKJSwNWP4WkBmA4hhoheIZMBL0W
2H9RqweinorJqawkEx6jTGdP637QUr/+0tCRj3h4ziE3KKcL8tbbEjXmfMTF
pUNFs1pUYIqxZ+2DycRYeWC/A6sNhoaYi677kIkHNo7+E9tb4cPN9K9LeslE
sHm5YCk0gbBb/HTUBn5CujFg+vv9Vqi/IWIiL0Am3qV5muntaYHdxgbLVp0n
E86ZR9QOHe8G9tHjMgdFyYTF+xRJq9xGiKpNDdMt5SMOngw15bdvhh8OLxZt
WcvLl23gheUGHUBdPPhh51Eyka42amp3tR3UDSwLDwzzEc5JazViR5pA94Ce
lEErHyGaedfrQkkjNBkfuimlQybqvpZHUvnqQathwOuoFB9xdDg5QOpQC3Sn
Oxat3MRH6F/1D19uVAbpKazUVX78xJLyYLfInp9ga/DxaVscP2GVbfKp/X4t
jDDurqcn8hPek00vPjr8g5Aas1nufTIxMGte/is/B1rr07c0Z/ARhaVpP3KJ
XLDrLdO1/cpHXLhofEhsuhzqhPgzzO7w9Iic2Rw1WwxXPjMjzkaSiaLdWdkF
lzPh1J/HQvuf8BG9hqdWWvD+dygoC1tpwU+8rbLZVtmVDqqJTxpO8vR/GHn7
3iIoGW+vVl9e7kcmuiyD+kyOBkJxaFTYwwZ+QsVUaVjPKgF7LfUFLC35iI3P
l8tn5GbhX2F90dp9vPgijWIfq/NQ+l3xr5/tfAQpvumjnqs71KblVlMe8hHW
K4OWqsT/RVE31f6lK/mJp11RtjOUcHTtTVd1MOMj7hZ82VAeXYqORsMhdor8
BPFGMjdvdy6aq8jcNQjnJ8xH7z88FZ2PrBS7fA6DTGis/hbJp1CG5sLjX6ye
kAnhnMYihadNuOfdn+d7jvERIYvXDHbeKcDt0TtUjG6TCY5RmUeiZyM2ptNW
cF35iKuDJM6jilrsGAwummojEz869no+4dRjoXNwkrUBPyG6+fw0VaQDt8Ws
Obc3lp+IDoi58Dqvk6f3bdyzCj5i6fRXUkVmDTr5y/LRefU+/eFz35+XLQgP
pb3WHeQjSg/I5k8HtuHCLbFgvgf8xBMz7q8WqTpU6H2UVAlkgkuesjiypxU/
WB5QeeTOT4gtEntlKdyKxcWheg/P8RPf/azGXk31Ytxkzi6xAD7CalxmlXlQ
Gzpv03Y2HeUjMGn7hAKnFXt9HNt7X5EJddPzX8569uJeLcP4KBs+QjUr6PMY
uwtLlE+eMPMnE3S8lvHzzwBy3xGnv6zgIw4H2iayIwYwaYl7/2J/PuLOgDy1
9XUPKp+XizKfJBEmo1eWDJ2lYkNCi5szwUeYQOfbr+JD6DXb8ez3OZ6ffV5Z
lpo+gtV3gq+M8e5zUGT+j4jFY1h2Q/CRfRqJONcloVr8ZhgNdMzWai8mE3sE
fp55ozOETDejgXVbyUQYSXVjmmM/Dr9Mzk+oJRF57WlRut6DSDMOdRPm+Xl6
fmBCus44knhJEa4iEa4tcbEHMsbQ4h0nuzafRDT/lGjz9qGhanXKjS6eH4aN
WS6Z+jeBzY2xKld551ODOMFJfjuBMo/PbG5O4On5fnbtgCADLbeqjp2vJhOi
r5UuF4hP4Od+wemgWRKRaXY+zXQPHWNbfo9plZIIIrCEvJkzij6P7qlKbycT
nhYH2wYFJ5AW2MpmyXDB1bDksyWXhv6uguFCgyTiRb7GDpmkSawlvVE+F04m
livnOyx8YeDH+1YSI15kotNo8TfqaTr+GezeXG3L87voHlMR0WksZbx8vvkw
mRAwrNekb6djdGXKh9K/JMKBdeK8rRkdI1iD78m873LtlP0Hj9CxdN5q/YkK
EvHH7av/s01TeO2JX9RKHrdX6l3JVzea5s2t5r9lLnPBk6/qZeSmSVx13+NC
XTwb/O1f6rFMZvDnBXFNtjWP8+8z7l3+OY0hXFKQrASJ0P163T3GZhof77mo
knCRRJTaC566VDyLuFFz2/orbHiqy2ckLT6DgkdPK5iMseFDtHidPk5jbdYK
ak88FzDDdPINMY0zhi4Lz9+yQeBMX7BT/wwas47w6VxgQeHwA6vaZ9O4deKk
8O1HLLA/5MY/WshE1k/xj/qxbPBqI589spGJHzpvnhPkzRH6k4qxy4/NYMOp
ns1neRx6Q6wDRNfNY4Xu9iwRYw4cXCXz12fNLD4+0TtO02CD6iE9EeauWRTP
0dxww2oBSkftpSJeLeBt3+3c5cCGnqiYcNHFTNx7K4K8PosNjqyTn7JS53HD
1msGyk/m4Yttw0v38HkU35Zq3nprDvwfMwTf/mVizJEB+QuFC9D5e8uKEeMF
7GgPPfo8ZA4eC21on3oxhzKsM1teVDHBQsiLseP5HDatPvSq5usCLLmsxLFU
ZaOF8mxQII8rX7w46hD2eg4N3CBCP3IWqk9ZnPqaMo/x8ss3X0mbhcFvTZzx
Z2zUchVKbebNBR/MJZpujc6jT6J7bVA0j/uWV+fGb+SiTbBZ9+5tTOh8sMIj
hryA6zU7Vi/ymYZTvWGyhb1sFL5V37FlIxMk3BXDCCUu5nddHApbOgPzJ+10
H3BYKGf6hTVkx4RnkXfK7fjZaC+eFPKCOguMah8JFSYHx7UTRvLdZ0HgU9Ga
ig4Wbro2KOz7ZhbOPa+3vp/ExtQij5i67dPwIs9qX389B6Mveuw1np6Cx+bs
ZwMNLAzTM3BQPj0DBbHftz13IlGeacAtmdNTcHXrUFTJLjY+cUgsteXNCz6a
J08e0iJRjBXvnTE+MQNk7e0rJbkkisSzYF+Df5MQYbttcHQnmUJ/yD6/rXAS
li+pVk7YR6Konn2VU9/D47T6FRtG15AofJs/tBV4MkCX5H09UpJMidFfYuj0
3yRE+oo5GTqQKQ0W14XiLBnQvs7F+Z4RiSIWtFi4ncdhyt+L+SQGuXgz/LOe
P40GgVTp8z77SZTZCa6U2k46vBPold0syouvm+Vwav8E7LI2Ta9QJ1Py7tp0
MFUnoMHF8aezJ4mycUz7qfyBcZDbor7m8RIy5ddDTuvvmjHIxWt6xuJkivrR
aeFvO8bA7KTxGv9jJMq1G8dJzRdH4eWalyLji/godfSy2Pzfw+ChtzPh6lY+
isCkxLjUjlEYXydXouZAolTmNr7EyBFou5FvNtBGopgqOS3S2z0CPpfYfIND
ZEqoaHTfwP0+6HkZobH2NR+FM7uK8JLoh1e7zz0CeTJl/Gzi9W1So1CSE+8a
PEKiRIjGniCgF0waZXINvvNRLGUOiDzeOAyS/07bn/Hgo+TV1LqtPz4A3N1D
5yW1yZSZkcefa1r6wUnWJaBvFx8lVtkfPmb3wdADB9cGJz5KMn2PXDqtBw73
JPzn4MNHsb20I8X/fDdsmZI7X9XCR3G+SkpJUesCoW6mTZUUmaImefG44kQL
XDl6UltZg0zZEB42pUxvhdU/2u84hfNT6Af+xNSIt0GE1mONYX8+yqrgUdZ/
fY2wY+8OiYVz/JTEoC0bruV3QVhstnDRRX7KfP5sxenn7TBjX7CTm8hH6SHp
PTgT0Mrzhw6HwUR+ipCid6Zb4V+oLE4uDF/KT2Fd5Fe4/bgFaAUZx84K8FNk
F8nZCkTUwm+z1fe+3yNTRJvvGb1/XApM1zunqor4KSEFVqMCrBYovUbvFX/H
T0lZLaqUvKQYzgQwvtW+5Ke4b79yTkm7BPY0qLP2pPBT8tjx37WavkFP/O1D
FiH8lJxx12ztbaWwfPKTfQiNjxJ14rdymHsalCfITEWv4aP8DxcLpmE=
      
      "]]}, {}}, {}, {}, {}, {}},
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-2.15954498448786, 2.4797488345809326`}, {-2.470114398411962, 
   2.746905436348208}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.739565099627729*^9},
 CellLabel->
  "Out[275]=",ExpressionUUID->"4e35e5cf-e152-4926-b48c-ed5e6726b19b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"c", " ", "=", " ", 
  RowBox[{"Classify", "[", 
   RowBox[{"data", ",", 
    RowBox[{"Method", "\[Rule]", "\"\<NearestNeighbors\>\""}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.739565229972929*^9, 3.7395652332102823`*^9}, {
  3.739565651577655*^9, 3.739565657698431*^9}},
 CellLabel->
  "In[283]:=",ExpressionUUID->"f6461d5d-1290-43f4-8154-ba327a03e0f0"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ClassifierFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{"\"NumericalVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "2", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{",", "\",\"", "1", "2"}, "RowWithSeparators"], 
                  "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{
               PointSize[0.13], 
               GrayLevel[0.45], 
               
               PointBox[{{0.9821769431797024, -0.440194219686987}, {
                1.1339776261519132`, 0.8056918676854272}, {0.5279892326667741,
                 0.6574306661126254}, {0.022147046479890797`, 
                1.4937877187998898`}}], 
               GrayLevel[0.7], 
               
               PointBox[{{-0.9815166384819979, 
                0.15045697525228735`}, {-0.5923526886966953, \
-0.33441771553094035`}, {-0.005656646679640442, -1.462421365651345}, \
{-1.0734370436522753`, -1.3729645043477454`}}]}, {
               GrayLevel[0.55], 
               AbsoluteThickness[1.5], 
               LineBox[{{-1., 1.5}, {1, -1.6}}]}}, {
             Axes -> {False, False}, AxesLabel -> {None, None}, 
              AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
                AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
              Frame -> {{True, True}, {True, True}}, 
              FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
              GridLines -> {None, None}, 
              LabelStyle -> {FontFamily -> "Arial"}, 
              Method -> {"ScalingFunctions" -> None}, 
              PlotRange -> {{-1., 1}, {-1.3, 1.1}}, PlotRangeClipping -> True,
               PlotRangePadding -> {{0.7, 0.7}, {0.7, 0.7}}, 
              Ticks -> {None, None}}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{"\"NumericalVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "2", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Classes: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{",", "\",\"", "1", "2"}, "RowWithSeparators"], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"NearestNeighbors\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["1256", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ClassifierFunction[
   Association[
   "ExampleNumber" -> 1256, "ClassNumber" -> 2, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "NumericalVector", "Length" -> 2]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
         "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"NumericalVector"}, "FeatureKeys" -> {"f1"},
                 "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic,
                 "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ImputeMissing", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Imputer" -> (DimensionReducerFunction[
               Association[
               "ExampleNumber" -> 1256, "Imputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Fill" -> {0.1484428960874375, 0.15183842358587354`}, 
                   "Method" -> "Naive", "VectorLength" -> 2, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "RandomImputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Mean" -> {0.1484428960874375, 0.15183842358587354`}, 
                   "StandardDeviation" -> {1.2579867425335738`, 
                    1.2570673955406872`}, "Method" -> "NaiveSampler", 
                   "VectorLength" -> 2, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "Preprocessor" -> 
                MachineLearning`MLProcessor["ToMLDataset", 
                  Association[
                  "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 2]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
                   True, "Invertibility" -> "Perfect", "Missing" -> 
                   "Allowed"]], "Processor" -> 
                MachineLearning`MLProcessor["Identity"], "Padder" -> 
                MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                MachineLearning`MLProcessor["FromMLDataset", 
                  Association[
                  "DatasetFormat" -> Automatic, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 2]], 
                   "InversePreprocessor" -> 
                   MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1]]}]], "ScalarFeature" -> True, 
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
                "Model" -> 
                Association[
                 "Matrix" -> {{-0.7071067811865497, -0.7071067811865452}, {
                   0.7071067811865452, -0.7071067811865497}}, "Processor" -> 
                  MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {0.1484428960874375, 0.15183842358587354`}, 
                    "StandardDeviation" -> {1.2579867425335738`, 
                    1.2570673955406872`}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                  "FinalDimension" -> 2, "Method" -> "Linear"], 
                "PerformanceGoal" -> Automatic, "Invertibility" -> 
                "Approximate", "Log" -> 
                Association[
                 "TrainingTime" -> 0.008588, "MaxTrainingMemory" -> 116616, 
                  "DataMemory" -> 20600, "FunctionMemory" -> 21752, 
                  "LanguageVersion" -> {11.3, 0}, "Date" -> 
                  DateObject[{2018, 7, 2, 20, 14, 18.64437`8.02312269722817}, 
                    "Instant", "Gregorian", -4.], "ProcessorCount" -> 2, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "MacOSX", 
                  "SystemWordLength" -> 64, "Evaluations" -> {}]]][#, 
               "ImputedVectors", PerformanceGoal -> "Quality"]& ), "Method" -> 
             "DimensionReduction", "VectorLength" -> 2, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
             "NumericalVector", "Version" -> {11.3, 0}, "ID" -> 
             7263179337424669307]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Mean" -> {0.1484428960874375, 0.15183842358587354`}, 
             "StandardDeviation" -> {1.2579867425335738`, 
              1.2570673955406872`}, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 1519634882283037191]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Nominal"]], 
         "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Nominal"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], "Output" -> 
         Association["f1" -> Association["Type" -> "Nominal", "Weight" -> 1]],
          "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 8901912692949392733]], 
           MachineLearning`MLProcessor["IntegerEncodeNominalVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Index" -> {
               Association[1 -> 1, 2 -> 2]}, "MissingCode" -> 0, 
             "Version" -> {11.3, 0}, "ID" -> 5272359975513785890, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NominalVector", "Weight" -> 1]]]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "NominalVector", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Nominal", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 3197017005843221070]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association[
              "Type" -> "Nominal", "Weight" -> 1, "SetSize" -> 2], "Key" -> 
             "f1", "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
      "ProbabilityPostprocessor" -> Identity, "Name" -> "class", "Marginal" -> 
      Association[1 -> 0.5, 2 -> 0.5]], "Prior" -> Automatic, "Utility" -> 
    SparseArray[
     Automatic, {2, 3}, 0., {1, {{0, 1, 2}, {{2}, {3}}}, {1., 1.}}], 
    "Threshold" -> 0, "TieBreaker" -> RandomChoice, "PerformanceGoal" -> 
    Automatic, "BatchProcessing" -> Automatic, "Model" -> 
    Association[
     "NeighborsFunction" -> 
      MachineLearning`PackageScope`NeighborsFunction["Nearest", 
        NearestFunction[
         Hold[
          Nearest[CompressedData["
1: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
GLleNoEv/gy2ZNQ0wWcS8dbYo3lEqTDaQ1oLll6uEupqoOOxIL3yi+5kpM6P
pTKOzmLTqeJw7hgmCnIQ3MXuE6DR4cGzLR3vULfB3U1rfyNUKoq71jotQPNe
6SZC8CA0kG/YiG4jYTpvwFXxvWPgvyt/PieIic+DtzzIrykHqfsN62I1+1Yr
V+X0ne2d6M9xePbPTAE0D+SIHp2qxFeLfm+uXv2NwXuNfMM0evHZdcuS10HR
wBsQ0k36Tofee+2nmxfHIGNiZr7lIRnjDkVPjYawwE7poWXH1Rbco2nkx350
EuJFpZvbf5WDzNZpUZdNDFza8c3vhvYYuFj/ipGP74Jjv73CUwJX8CnzAsXp
JhGvbmzI/yXPAI70Y5Ej7BOo5dx9KbuxCwPGuVOy0tsg8sfEzlik4HCONX16
fxqYer8r1h9uANbHU7E1tt9B6vyzENkoOrh8NPDw+j4BN6LmbqUFUcFg/tG/
XVvoeGcNY8O1mtW8OFQennxIhjvhb/zjNGnI2C248CdnDo9zcx6ycP0C/30z
VtFd5flDe7GnnFlEaONVyf9nsIQRW+U71hL74PlD90W5iCHcY+MQOLxAgpBk
86bubas++1npxvMMGuhcusM4to6CPtuNxYMI8/CpSfAh+w4GOv2li7X/Nw47
9n1X/DPXjylmv/TZfg0gvHVXbklYwLaiujsZ0fNwXraRT1uGDDvMkxoOYCnW
td792ft+HF9YsL1Tuk4EqYbz+wvkOxCee2/n9pyHU4d/XpSsJ6DXQdaYt+tv
lF5bWrH+JwMEFK8evt/UDATJd3CF8xdc2FQX2BFGR8EMglLc9lK0mAnb78ag
gO/NXh773i7kfhl0o/H9EH4vX7+18tMIKHz68/qP8iBojC03T44NwYbvcx9u
O9Ch6uruWSadicMcK+/kxxpxt06nHtV9DllChUyPJ61gtnS8rnFfBgrvKd6x
S34Bn1LlDR2elSLB8if55q8mPNb1ZMF1tY/eDJ1bPH63ERpz4kUFldtwSMvc
JFmOCku1ty7KxxIg7pxSmu+vCvyZfEZXVogMo0Fixq2yJCiQtf+YmT+z6rOx
9Y7PSbj/FLvo5lUfuK+WemRScQgHh3T4oiUG4Lq0dm1oxKpXca1kUt6QcELB
Ty9LdgGERPcqlH1mAN+dtzzsinNoN3NdqMGEBNaPXZXaBJIgIPfyruNB5fhj
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
            "] -> 
           Automatic, Method -> "KDtree"]]]], "NeighborsNumber" -> 20, 
      "ClassPriors" -> {0.5, 0.5}, "TrainingOutput" -> CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIj
UPAFCwMDIyMTIxMTEyOYBkMwAAsxgUgIAgswQRWDaUYmmGImKA+qkZGJEa4W
wocZgWQiwjao1eguwOIAfPYjW89EgvVM1LacFL8PL8sHNNhHruWjcU6U5QB/
5hSi
       "], "DistributionSmoothing" -> 0.5, "Processor" -> 
      MachineLearning`MLProcessor["FirstValues", 
        Association[
        "Info" -> Association["Type" -> "NumericalVector", "Weight" -> 1], 
         "Key" -> "f1", "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Method" -> "NearestNeighbors", "Options" -> 
      Association[
       "NeighborsNumber" -> 
        Association["Value" -> 20, "Options" -> Association[]], 
        "DistributionSmoothing" -> 
        Association["Value" -> 0.5, "Options" -> Association[]], 
        "NearestMethod" -> 
        Association["Value" -> "KDtree", "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "LossName" -> "MeanCrossEntropy", "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> 
         PlusMinus[0.021112540653547437`, 0.0015721118399747442`], "Accuracy" -> 
         PlusMinus[0.9944999414006385, 0.002989493565214699], 
         "EvaluationTime" -> 0.000034777461582242456`, "TestSize" -> 1506, 
         "TrainingSize" -> 1005, "TrainingTime" -> 0.04242599999999999, 
         "TrainingMemory" -> 3.4339771428571427`*^6, "ModelMemory" -> 24768., 
         "ExperimentCount" -> 6, "ModelUtility" -> 20.158606587037095`, 
         "MeanCrossEntropyHistory" -> {
           PlusMinus[0.022293692690228885`, 0.00400993019003917], 
           PlusMinus[0.020214358372957326`, 0.0036525182438696857`], 
           PlusMinus[0.02132930782154361, 0.003693901566754963], 
           PlusMinus[0.021488993123788786`, 0.003842876288802041], 
           PlusMinus[0.021529730481949078`, 0.0037438912460415305`], 
           PlusMinus[0.02009204488916796, 0.0036340579100610083`]}, 
         "AccuracyHistory" -> {
           PlusMinus[0.9944999414006384, 0.007322733824109719], 
           PlusMinus[0.9944999414006384, 0.007322733824109719], 
           PlusMinus[0.9944999414006384, 0.007322733824109719], 
           PlusMinus[0.9944999414006384, 0.007322733824109719], 
           PlusMinus[0.9944999414006384, 0.007322733824109719], 
           PlusMinus[0.9944999414006384, 0.007322733824109719]}, 
         "Configuration" -> {
          "NearestNeighbors", "NeighborsNumber" -> Automatic, 
           "DistributionSmoothing" -> 0.5, "NearestMethod" -> Automatic}, 
         "FinalTrainingSize" -> 1256], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
          "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory", 
          "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
          "AccuracyHistory", "Configuration", "FinalTrainingSize"}, {
         TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Vector[TypeSystem`AnyType, 6], 
          TypeSystem`Vector[TypeSystem`AnyType, 6], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType}], 
          TypeSystem`Atom[Integer]}], 
        Association["ID" -> 270269549063452]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "NearestNeighbors", "Options" -> 
           Association[
            "NeighborsNumber" -> Association["Value" -> Automatic], 
             "DistributionSmoothing" -> Association["Value" -> 0.5], 
             "NearestMethod" -> Association["Value" -> Automatic]]] -> 
         Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.770475317838932, 0.05701636277500607], "Accuracy" -> 
              PlusMinus[0.5831411140301163, 0.0374051303412113], 
              "EvaluationTime" -> 0.000040793636363636354`, "TestSize" -> 
              1500, "TrainingSize" -> 10, "TrainingTime" -> 
              0.003104454545454545, "TrainingMemory" -> 47599.99999999999, 
              "ModelMemory" -> 6096., "ExperimentCount" -> 10, "ModelUtility" -> 
              0.5524381898039756, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.7940032687935308, 0.033390153941164326`], 
                PlusMinus[0.5538848994647498, 0.06751228183017406], 
                PlusMinus[0.8294784677951204, 0.052466084904501366`], 
                PlusMinus[0.7784180694431402, 0.08031991685743295], 
                PlusMinus[1.2472787573923312`, 0.1228228081332697], 
                PlusMinus[0.7944869396327572, 0.030688817104227994`], 
                PlusMinus[0.6984598860624184, 0.053910943787416704`], 
                PlusMinus[0.7520798436008282, 0.05960002674343218], 
                PlusMinus[0.7602701495427145, 0.02159355792423034], 
                PlusMinus[0.7662298053662523, 0.053053755323258046`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.46039603960396064`, 0.04980060717995439], 
                PlusMinus[0.7673267326732683, 0.04263986391401215], 
                PlusMinus[0.48019801980198035`, 0.04993684749324002], 
                PlusMinus[0.6386138613861393, 0.048196108468711966`], 
                PlusMinus[0.4504950495049506, 0.04970306403042821], 
                PlusMinus[0.4751953990368329, 0.03527609054050352], 
                PlusMinus[0.6806785138738003, 0.033004087074491234`], 
                PlusMinus[0.6741900152080779, 0.03324238903917182], 
                PlusMinus[0.529876994144098, 0.035248178171267755`], 
                PlusMinus[0.5546986653072308, 0.035136772450613855`]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.23184838845644323`, 0.016850637253196358`], 
              "Accuracy" -> 
              PlusMinus[0.9510637070787127, 0.015930674178104873`], 
              "EvaluationTime" -> 0.000035193888888888886`, "TestSize" -> 
              2200, "TrainingSize" -> 40, "TrainingTime" -> 
              0.0034732499999999993`, "TrainingMemory" -> 74929.33333333333, 
              "ModelMemory" -> 6584., "ExperimentCount" -> 11, "ModelUtility" -> 
              1.8363330998803242`, "MeanCrossEntropyHistory" -> {
                PlusMinus[0.345101197069864, 0.05346504985672551], 
                PlusMinus[0.35075812634879106`, 0.057334166685624584`], 
                PlusMinus[0.22178442031407516`, 0.02411660255145745], 
                PlusMinus[0.20854549332142427`, 0.013022402064528482`], 
                PlusMinus[0.25139676866410426`, 0.022334228406502923`], 
                PlusMinus[0.2800586478390606, 0.02629719151357906], 
                PlusMinus[0.21426314002889282`, 0.020737417215601968`], 
                PlusMinus[0.2816950123150347, 0.03525317060708891], 
                PlusMinus[0.2625830259095175, 0.01854928027534894], 
                PlusMinus[0.20647132097924764`, 0.01029821560457765], 
                PlusMinus[0.3087215391173913, 0.02523005150477325]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.8564356435643576, 0.03572910147291488], 
                PlusMinus[0.8465346534653476, 0.03666756062811902], 
                PlusMinus[0.9752475247524768, 0.01760286637811888], 
                PlusMinus[0.9810740521056731, 0.01129221802754782], 
                PlusMinus[0.955445544554457, 0.015658714382739917`], 
                PlusMinus[0.936906131067487, 0.018047399158060667`], 
                PlusMinus[0.9168058342941965, 0.02024030476057325], 
                PlusMinus[0.8826874053356201, 0.02329022182333794], 
                PlusMinus[0.8722946788285475, 0.019659663851617878`], 
                PlusMinus[0.9825835063924161, 0.008959597090130516], 
                PlusMinus[0.921146363654905, 0.01612205558531266]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.056010293794684834`, 0.0013922049152672188`], 
              "Accuracy" -> 
              PlusMinus[0.994627109920088, 0.0025990982379327523`], 
              "EvaluationTime" -> 0.00004627292857142857, "TestSize" -> 1900, 
              "TrainingSize" -> 200, "TrainingTime" -> 0.012920142857142856`, 
              "TrainingMemory" -> 711536., "ModelMemory" -> 9560., 
              "ExperimentCount" -> 6, "ModelUtility" -> 7.673635658936941, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.055102750197658146`, 0.005461203407563694], 
                PlusMinus[0.05504145474922268, 0.00545154441515687], 
                PlusMinus[0.05527527582692526, 0.002458674809359832], 
                PlusMinus[0.056891159660075234`, 0.0029643060230215967`], 
                PlusMinus[0.05655574108149245, 0.0030505528760558604`], 
                PlusMinus[0.0562865137956813, 0.0032745858416617806`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9950495049504966, 0.011025716123134242`], 
                PlusMinus[0.9950495049504966, 0.011025716123134242`], 
                PlusMinus[0.9950495049504965, 0.00493085015038872], 
                PlusMinus[0.9950495049504966, 0.005512858061567121], 
                PlusMinus[0.9950495049504966, 0.005512858061567121], 
                PlusMinus[0.9927593867419998, 0.005986293849345475]}], 
             Association[
             "MeanCrossEntropy" -> 
              PlusMinus[0.021112540653547437`, 0.0015721118399747442`], 
              "Accuracy" -> 
              PlusMinus[0.9944999414006385, 0.002989493565214699], 
              "EvaluationTime" -> 0.000034777461582242456`, "TestSize" -> 
              1506, "TrainingSize" -> 1005, "TrainingTime" -> 
              0.04242599999999999, "TrainingMemory" -> 3.4339771428571427`*^6,
               "ModelMemory" -> 24768., "ExperimentCount" -> 6, 
              "ModelUtility" -> 20.158606587037095`, 
              "MeanCrossEntropyHistory" -> {
                PlusMinus[0.022293692690228885`, 0.00400993019003917], 
                PlusMinus[0.020214358372957326`, 0.0036525182438696857`], 
                PlusMinus[0.02132930782154361, 0.003693901566754963], 
                PlusMinus[0.021488993123788786`, 0.003842876288802041], 
                PlusMinus[0.021529730481949078`, 0.0037438912460415305`], 
                PlusMinus[0.02009204488916796, 0.0036340579100610083`]}, 
              "AccuracyHistory" -> {
                PlusMinus[0.9944999414006384, 0.007322733824109719], 
                PlusMinus[0.9944999414006384, 0.007322733824109719], 
                PlusMinus[0.9944999414006384, 0.007322733824109719], 
                PlusMinus[0.9944999414006384, 0.007322733824109719], 
                PlusMinus[0.9944999414006384, 0.007322733824109719], 
                PlusMinus[0.9944999414006384, 0.007322733824109719]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.000034777461582242456`, "MeanCrossEntropy" -> 
             PlusMinus[0.021112540653547437`, 0.0015721118399747442`], 
             "ModelMemory" -> 24768., "TrainingMemory" -> 
             3.4339771428571427`*^6, "TrainingTime" -> 0.05612640081411125], 
           "Index" -> 1]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[String], 
           TypeSystem`Assoc[
            TypeSystem`Atom[String], 
            TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 3]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "Accuracy", "EvaluationTime", "TestSize", 
              "TrainingSize", "TrainingTime", "TrainingMemory", "ModelMemory",
               "ExperimentCount", "ModelUtility", "MeanCrossEntropyHistory", 
              "AccuracyHistory"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
              TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength]}], 
            4], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "MeanCrossEntropy", "ModelMemory", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 1], 
        Association["ID" -> 270265254096156]], "MaxTrainingSize" -> 1256, 
      "LastReportingTime" -> 3.739551260061465`16.3253944798707*^9, 
      "PreprocessorEvaluationTime" -> 3.96826171875`2.*^-6, 
      "PreprocessorMemory" -> 39272, "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 10, "TimeBudgets" -> 0.25600000000000006`, 
          "ElapsedTimes" -> 0.254451, "ExperimentCounts" -> 10], 
         Association[
         "TrainingSizes" -> 40, "TimeBudgets" -> 0.32000000000000006`, 
          "ElapsedTimes" -> 0.329639, "ExperimentCounts" -> 11], 
         Association[
         "TrainingSizes" -> 200, "TimeBudgets" -> 0.4, "ElapsedTimes" -> 
          0.4064789999999999, "ExperimentCounts" -> 6], 
         Association[
         "TrainingSizes" -> 1005, "TimeBudgets" -> 0.5, "ElapsedTimes" -> 
          0.46180499999999997`, "ExperimentCounts" -> 6]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 4], 
        Association[
        "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
           Dataset`DatasetHandle[270273844030748]], "ID" -> 
         270278138998044]]], "Log" -> 
    Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "NumericalVector", "Weight" -> 1, 
           "Values" -> {{0.9318608567011437, -2.1319756613447365`}}, "ID" -> 
           2825882393954120476]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> False]], 
      "TrainingTime" -> 1.797405, "MaxTrainingMemory" -> 3674712, 
      "DataMemory" -> 251400, "FunctionMemory" -> 145600, 
      "LanguageVersion" -> {11.3, 0}, "Date" -> 
      DateObject[{2018, 7, 2, 20, 14, 20.399118`8.06218637387521}, "Instant", 
        "Gregorian", -4.], "ProcessorCount" -> 2, "ProcessorType" -> "x86-64",
       "OperatingSystem" -> "MacOSX", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.739565237705288*^9, 3.739565660447823*^9},
 CellLabel->
  "Out[283]=",ExpressionUUID->"d308cc96-e7d4-4997-86b7-d7c235b0d1b0"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"tableData", " ", "=", " ", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"c", "[", 
      RowBox[{"{", 
       RowBox[{"x", ",", "y"}], "}"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"-", "3"}], ",", "3", ",", "0.1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"y", ",", 
       RowBox[{"-", "3"}], ",", "3", ",", "0.1"}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.739565484162283*^9, 3.739565520028208*^9}},
 CellLabel->
  "In[284]:=",ExpressionUUID->"ed57fe9a-e887-43a6-8664-c674f8917a19"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ArrayPlot", "@", "tableData"}]], "Input",
 CellChangeTimes->{{3.739565539280519*^9, 3.739565541777458*^9}, {
  3.7395656268603077`*^9, 3.73956563053292*^9}},
 CellLabel->
  "In[285]:=",ExpressionUUID->"dcb975a1-3155-4a8d-bf0d-96c49db5519f"],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1:eJzt0ssNwyAQBFDWnbiQNOES3ID7v/kSK7DM7Ccop+xIXEb7AFvs53WcW2vt
9V6Vyp9FPlmgWa9piiMc1JAGNbMRza2PDetq065hR+fwWIBJA48FHKRYOLbL
p8fY2fGpHfsLbFxw+jY26hy8hhtqdUV+DDhl7sTDxmWEY/2UJiwWnjMMSg73
g5q6upsD1sYIRLVrDR2wFEcs1TEMdZAinqCaJ2m3wVeyUqnkcwOx6Amd
   "], {{0, 0}, {61, 
   61}}, {0, 2}],
  Frame->Automatic,
  FrameLabel->{None, None},
  FrameTicks->{{None, None}, {None, None}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> 
    Automatic}]], "Output",
 CellChangeTimes->{3.739565631165895*^9, 3.7395656714823933`*^9},
 CellLabel->"Out[285]=",ImageCache->GraphicsData["CompressedBitmap", "\<\
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
7YTJhPfu3cuEY2Nj5Jn5P+un2TA=\
\>"],ExpressionUUID->"bf931ded-d561-460a-afb6-bd53c9af18d9"]
}, Open  ]],

Cell["See the data", "CodeText",
 CellChangeTimes->{{3.739565729457533*^9, 
  3.73956573086273*^9}},ExpressionUUID->"4807714a-f260-4b7a-9a1b-\
8af3af3d47eb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"data", "[", 
  RowBox[{"[", "1", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.739565732497933*^9, 3.7395657342477827`*^9}},
 CellLabel->
  "In[286]:=",ExpressionUUID->"99115421-2ed0-4852-92a4-9f1065a9e923"],

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"0.16915772161408105`", ",", "0.36698134221121836`"}], "}"}], 
  "\[Rule]", "1"}]], "Output",
 CellChangeTimes->{3.739565734494205*^9},
 CellLabel->
  "Out[286]=",ExpressionUUID->"b0567151-0f54-49d7-a4d0-2f00f72e936c"]
}, Open  ]],

Cell["\<\
SoftmaxLayer[] probability of the outputs, should use all the time!\
\>", "CodeText",
 CellChangeTimes->{{3.739565849463826*^9, 
  3.739565861810457*^9}},ExpressionUUID->"884213a3-7d3f-49ab-9944-\
e5fddbd15eff"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net3", " ", "=", " ", 
  RowBox[{"NetInitialize", "@", 
   RowBox[{"NetChain", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"LinearLayer", "[", "10", "]"}], ",", 
       RowBox[{"ElementwiseLayer", "[", "Ramp", "]"}], ",", 
       RowBox[{"LinearLayer", "[", "2", "]"}], ",", 
       RowBox[{"SoftmaxLayer", "[", "]"}]}], "}"}], ",", " ", 
     RowBox[{"\"\<Output\>\"", "\[Rule]", 
      RowBox[{"NetDecoder", "[", 
       RowBox[{"{", 
        RowBox[{"\"\<Class\>\"", ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", "2"}], "}"}]}], "}"}], "]"}]}], ",", 
     RowBox[{"\"\<Input\>\"", "\[Rule]", "2"}]}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.739565737055916*^9, 3.739565779927927*^9}, {
  3.739565815100926*^9, 3.739565817559104*^9}, {3.739565886480517*^9, 
  3.739566011727681*^9}},
 CellLabel->
  "In[290]:=",ExpressionUUID->"b21b034c-a77e-48c8-9fe5-5af62afa2b60"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = True}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["4", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}, "RowsIndexed" -> {}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {15., {0., 15.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{10, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{10}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {10}, "$OutputSize" -> 10, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {10}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{2, 10}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{2}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 10, "$InputDimensions" -> {10}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association["Output" -> NetDecoder["Class", 
                    Association[
                    "Labels" -> {1, 2}, "InputDepth" -> 1, "Dimensions" -> 2, 
                    "$Rank" -> 0], 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox["\"\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   ImageSizeCache -> {
                    214., {48.771240234375, 55.228759765625}}, 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}, "RowsIndexed" -> {}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.73956600594049*^9, 3.739566012116284*^9}},
 CellLabel->
  "Out[290]=",ExpressionUUID->"29e66973-8691-4f9d-ae70-90ddb04abb00"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net3", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0.2", ",", "0.3"}], "}"}], ",", "\"\<Probabilities\>\""}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.739566015856647*^9, 3.739566033851671*^9}},
 CellLabel->
  "In[291]:=",ExpressionUUID->"eb4db708-4754-4312-90a5-33a711706de0"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"1", "\[Rule]", "0.553433895111084`"}], ",", 
   RowBox[{"2", "\[Rule]", "0.446566104888916`"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.739566035317486*^9},
 CellLabel->
  "Out[291]=",ExpressionUUID->"668a3763-3676-4d47-8e99-62d52298d885"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net3T", " ", "=", " ", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"net3", ",", " ", "data", ",", 
    RowBox[{"ValidationSet", "\[Rule]", "data"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.73956603969588*^9, 3.739566079448292*^9}},
 CellLabel->
  "In[292]:=",ExpressionUUID->"09ddc2ab-c68f-476b-8154-e9237edb2849"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["4", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{10, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{10}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {10}, "$OutputSize" -> 10, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {10}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{2, 10}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{2}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 10, "$InputDimensions" -> {10}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association["Output" -> NetDecoder["Class", 
                    Association[
                    "Labels" -> {1, 2}, "InputDepth" -> 1, "Dimensions" -> 2, 
                    "$Rank" -> 0], 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.73956614429513*^9},
 CellLabel->
  "Out[292]=",ExpressionUUID->"a71a3b3e-ce2b-405d-8400-f2f9ca332c59"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"tableData", " ", "=", " ", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"net3T", "[", 
      RowBox[{"{", 
       RowBox[{"x", ",", "y"}], "}"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"-", "3"}], ",", "3", ",", "0.1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"y", ",", 
       RowBox[{"-", "3"}], ",", "3", ",", "0.1"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"ArrayPlot", "@", "tableData"}]}], "Input",
 CellChangeTimes->{{3.739566127435508*^9, 3.739566137378735*^9}},
 CellLabel->
  "In[293]:=",ExpressionUUID->"15d93a49-65c1-49a0-8e80-10eeb650776b"],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1:eJzt1LENAyEQBEDWnbgQN+ESvoHvP3PiwP/s3u2BrQ/MSgScbkAgwX3bn9ut
tfZ4j5WVCwPMWAxzYFwDYxrHjMuKJtTXHHtaWE9LbGhtDR3hTIc20zM4sbHu
eguaNIb2MGeNyp4LfJPICsyq5IR0X3YTshZdS3e8T4xzWpqOVPTP8JXPp/QC
vosjnWOtDau0RQU2LdW2JbpgO16z9C+qLjCBV1b+MC+QNgmi
   "], {{0, 0}, {61, 61}}, {
   0, 2}],
  Frame->Automatic,
  FrameLabel->{None, None},
  FrameTicks->{{None, None}, {None, None}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> 
    Automatic}]], "Output",
 CellChangeTimes->{3.739566146129284*^9},
 CellLabel->"Out[294]=",ImageCache->GraphicsData["CompressedBitmap", "\<\
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\
\>"],ExpressionUUID->"81cdcac1-7516-4f19-ad27-311841a0c9f1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net3", " ", "=", " ", 
  RowBox[{"NetInitialize", "@", 
   RowBox[{"NetChain", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"LinearLayer", "[", "10", "]"}], ",", 
       RowBox[{"ElementwiseLayer", "[", "Ramp", "]"}], ",", 
       RowBox[{"LinearLayer", "[", "2", "]"}], ",", 
       RowBox[{"SoftmaxLayer", "[", "]"}]}], "}"}], ",", " ", 
     RowBox[{"\"\<Output\>\"", "\[Rule]", 
      RowBox[{"NetDecoder", "[", 
       RowBox[{"{", 
        RowBox[{"\"\<Class\>\"", ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", "2"}], "}"}]}], "}"}], "]"}]}], ",", 
     RowBox[{"\"\<Input\>\"", "\[Rule]", "2"}]}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.739566455382042*^9, 3.739566478831832*^9}},
 CellLabel->
  "In[299]:=",ExpressionUUID->"3ba8064d-48e1-4339-bca7-8493208c3928"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = True}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {15., {0., 15.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["4", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}, "RowsIndexed" -> {}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {15., {0., 15.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{10, 2}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{10}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {10}, "$OutputSize" -> 10, 
                    "$InputSize" -> 2, "$InputDimensions" -> {2}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {10}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyRawArray[{2, 10}], "Biases" -> 
                    NeuralNetworks`Private`DummyRawArray[{2}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 10, "$InputDimensions" -> {10}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association["Output" -> NetDecoder["Class", 
                    Association[
                    "Labels" -> {1, 2}, "InputDepth" -> 1, "Dimensions" -> 2, 
                    "$Rank" -> 0], 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                   NeuralNetworks`Private`NetChain`opart = {"Nodes", "4"}, 
                   NeuralNetworks`Private`NetChain`part = {"Nodes", "4"}, 
                   NeuralNetworks`Private`NetChain`selected = 
                   Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"10\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   ImageSizeCache -> {
                    214., {109.771240234375, 116.228759765625}}, 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "ColumnsIndexed" -> {}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}, "RowsIndexed" -> {}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.739566472899179*^9, 3.739566485340781*^9}},
 CellLabel->
  "Out[299]=",ExpressionUUID->"239b4ce2-306b-461f-af1a-e570c31b65a6"]
}, Open  ]]
},
WindowSize->{1130, 855},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
Magnification:>1.25 Inherited,
FrontEndVersion->"11.3 for Mac OS X x86 (32-bit, 64-bit Kernel) (March 7, \
2018)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[583, 22, 1064, 28, 117, "Input",ExpressionUUID->"cd2201d5-3990-46f6-93f6-f3f855f70801"],
Cell[1650, 52, 154, 3, 42, "Output",ExpressionUUID->"d797d7aa-118b-4de0-8bee-77c8a959b3a7"],
Cell[1807, 57, 1823, 46, 302, "Output",ExpressionUUID->"6f36e005-de60-49a4-bbc1-6b4ce2c8651a"]
}, Open  ]],
Cell[3645, 106, 322, 10, 37, "Input",ExpressionUUID->"38583dcb-b860-4af5-8c5c-40fe8be437f6"],
Cell[CellGroupData[{
Cell[3992, 120, 1768, 40, 170, "Input",ExpressionUUID->"3b285857-37b7-40a7-8c5b-d304e6c6f28e"],
Cell[5763, 162, 18240, 328, 188, "Output",ExpressionUUID->"44b43b77-7753-4378-b2c8-94626c24d5c3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[24040, 495, 353, 7, 37, "Input",ExpressionUUID->"546e3b35-5717-4f12-84d3-f01e03e6e08f"],
Cell[24396, 504, 18802, 336, 188, "Output",ExpressionUUID->"bee3108c-e410-402a-b54f-b650d990467d"]
}, Open  ]],
Cell[43213, 843, 340, 8, 37, "Input",ExpressionUUID->"d099b63e-573c-4434-abf0-e65fe0721273"],
Cell[CellGroupData[{
Cell[43578, 855, 253, 5, 37, "Input",ExpressionUUID->"d9b3b806-7049-464c-aca1-a780225ab0b3"],
Cell[43834, 862, 13997, 279, 112, "Output",ExpressionUUID->"4f707b21-23fc-4c98-b79c-1e312c068c3a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[57868, 1146, 337, 8, 37, "Input",ExpressionUUID->"25671e59-24ce-425e-9593-63385f2e0139"],
Cell[58208, 1156, 155, 3, 42, "Output",ExpressionUUID->"0e268855-a018-41a6-b692-9d3a97e51159"]
}, Open  ]],
Cell[58378, 1162, 224, 5, 37, "Input",ExpressionUUID->"77eeac71-1a25-4ea3-96bd-19f60ede45c3"],
Cell[CellGroupData[{
Cell[58627, 1171, 257, 5, 37, "Input",ExpressionUUID->"19c42d61-6053-48b8-84db-6da443d8f63b"],
Cell[58887, 1178, 13998, 279, 112, "Output",ExpressionUUID->"0dd47fe2-0477-4589-832b-7e5374a74ad2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[72922, 1462, 814, 22, 117, "Input",ExpressionUUID->"7c1d5da1-e4c6-4af4-81f3-b6caefe15772"],
Cell[73739, 1486, 194, 3, 42, "Output",ExpressionUUID->"a39eded2-da98-4bc7-9d22-3d2ab2f9a1a5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[73970, 1494, 336, 8, 37, "Input",ExpressionUUID->"073545ce-598d-415d-82d3-8a86e0397a6a"],
Cell[74309, 1504, 1823, 46, 302, "Output",ExpressionUUID->"3fc75dc3-8ba4-4f93-b504-28b42fe79cf7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[76169, 1555, 556, 14, 37, "Input",ExpressionUUID->"671099aa-1bc1-4fea-afc6-ab3cabc91866"],
Cell[76728, 1571, 12132, 220, 302, "Output",ExpressionUUID->"94617bff-5770-4d5e-b5f3-bb378dd11107"]
}, Open  ]],
Cell[CellGroupData[{
Cell[88897, 1796, 433, 10, 37, "Input",ExpressionUUID->"9203ca38-e97a-4ec1-b93f-1da7cf289488"],
Cell[89333, 1808, 22040, 452, 93, "Output",ExpressionUUID->"40587785-d6b6-4ed0-b693-6dc9d91cc0d8"]
}, Open  ]],
Cell[111388, 2263, 369, 10, 37, "Input",ExpressionUUID->"b462bcc5-fca7-4c5c-b7e9-c46ec1c1b2b9"],
Cell[CellGroupData[{
Cell[111782, 2277, 867, 24, 65, "Input",ExpressionUUID->"b3e341a8-8f61-4cf4-b8a8-42e01481e6e2"],
Cell[112652, 2303, 27464, 557, 226, "Output",ExpressionUUID->"3241738d-c3ae-4780-9e50-9936af382203"]
}, Open  ]],
Cell[CellGroupData[{
Cell[140153, 2865, 441, 9, 37, "Input",ExpressionUUID->"9a02beaf-5bbb-460a-a635-38ddf981e645"],
Cell[140597, 2876, 20548, 421, 93, "Output",ExpressionUUID->"a0f0ed41-f34e-4422-9ba3-529eb4145214"]
}, Open  ]],
Cell[CellGroupData[{
Cell[161182, 3302, 1464, 36, 170, "Input",ExpressionUUID->"872aa31a-2298-4d9c-8f72-bd960036fb2c"],
Cell[162649, 3340, 23255, 476, 135, "Output",ExpressionUUID->"c2cf7f42-c040-4783-b8b3-3d37ad6c4df8"],
Cell[185907, 3818, 48115, 977, 305, "Output",ExpressionUUID->"a3078f17-deba-4da1-af96-722636904049"]
}, Open  ]],
Cell[CellGroupData[{
Cell[234059, 4800, 532, 14, 37, "Input",ExpressionUUID->"008ad256-69b9-457f-8423-e79f9a197f62"],
Cell[234594, 4816, 2557, 51, 148, "Output",ExpressionUUID->"b4ab2911-86b9-417d-bc70-fc107e21f7ae"]
}, Open  ]],
Cell[CellGroupData[{
Cell[237188, 4872, 355, 8, 37, "Input",ExpressionUUID->"a3e1bfac-f4e2-4d46-bc34-77a9df141434"],
Cell[237546, 4882, 46472, 939, 93, "Output",ExpressionUUID->"63318ed6-2063-4a46-a3ac-4b7fbc42c8fd"]
}, Open  ]],
Cell[CellGroupData[{
Cell[284055, 5826, 460, 12, 37, "Input",ExpressionUUID->"c0105fef-bd38-4aa7-b70b-0cfc9a594c28"],
Cell[284518, 5840, 9450, 176, 302, "Output",ExpressionUUID->"3a9873a7-fcd0-4cbe-a94f-6161270da43d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[294005, 6021, 1653, 51, 117, "Input",ExpressionUUID->"351edee4-27ca-4b26-846f-ccfdb7f116be"],
Cell[295661, 6074, 27710, 472, 561, "Output",ExpressionUUID->"4e35e5cf-e152-4926-b48c-ed5e6726b19b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[323408, 6551, 384, 9, 37, "Input",ExpressionUUID->"f6461d5d-1290-43f4-8154-ba327a03e0f0"],
Cell[323795, 6562, 62373, 1109, 78, "Output",ExpressionUUID->"d308cc96-e7d4-4997-86b7-d7c235b0d1b0"]
}, Open  ]],
Cell[386183, 7674, 587, 17, 37, "Input",ExpressionUUID->"ed57fe9a-e887-43a6-8664-c674f8917a19"],
Cell[CellGroupData[{
Cell[386795, 7695, 264, 5, 37, "Input",ExpressionUUID->"dcb975a1-3155-4a8d-bf0d-96c49db5519f"],
Cell[387062, 7702, 5330, 93, 470, 585, 15, "CachedBoxData", "BoxData", "Output",ExpressionUUID->"bf931ded-d561-460a-afb6-bd53c9af18d9"]
}, Open  ]],
Cell[392407, 7798, 157, 3, 47, "CodeText",ExpressionUUID->"4807714a-f260-4b7a-9a1b-8af3af3d47eb"],
Cell[CellGroupData[{
Cell[392589, 7805, 231, 5, 37, "Input",ExpressionUUID->"99115421-2ed0-4852-92a4-9f1065a9e923"],
Cell[392823, 7812, 269, 7, 42, "Output",ExpressionUUID->"b0567151-0f54-49d7-a4d0-2f00f72e936c"]
}, Open  ]],
Cell[393107, 7822, 221, 5, 48, "CodeText",ExpressionUUID->"884213a3-7d3f-49ab-9944-e5fddbd15eff"],
Cell[CellGroupData[{
Cell[393353, 7831, 930, 22, 90, "Input",ExpressionUUID->"b21b034c-a77e-48c8-9fe5-5af62afa2b60"],
Cell[394286, 7855, 24790, 506, 151, "Output",ExpressionUUID->"29e66973-8691-4f9d-ae70-90ddb04abb00"]
}, Open  ]],
Cell[CellGroupData[{
Cell[419113, 8366, 305, 8, 37, "Input",ExpressionUUID->"eb4db708-4754-4312-90a5-33a711706de0"],
Cell[419421, 8376, 330, 8, 42, "Output",ExpressionUUID->"668a3763-3676-4d47-8e99-62d52298d885"]
}, Open  ]],
Cell[CellGroupData[{
Cell[419788, 8389, 337, 7, 37, "Input",ExpressionUUID->"09ddc2ab-c68f-476b-8154-e9237edb2849"],
Cell[420128, 8398, 24059, 491, 94, "Output",ExpressionUUID->"a71a3b3e-ce2b-405d-8400-f2f9ca332c59"]
}, Open  ]],
Cell[CellGroupData[{
Cell[444224, 8894, 659, 18, 64, "Input",ExpressionUUID->"15d93a49-65c1-49a0-8e80-10eeb650776b"],
Cell[444886, 8914, 5814, 101, 470, 577, 15, "CachedBoxData", "BoxData", "Output",ExpressionUUID->"81cdcac1-7516-4f19-ad27-311841a0c9f1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[450737, 9020, 832, 20, 90, "Input",ExpressionUUID->"3ba8064d-48e1-4339-bca7-8493208c3928"],
Cell[451572, 9042, 25332, 517, 273, "Output",ExpressionUUID->"239b4ce2-306b-461f-af1a-e570c31b65a6"]
}, Open  ]]
}
]
*)

